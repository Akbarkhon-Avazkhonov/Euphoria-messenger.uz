var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AdminController.html",[0,1.336,1,2.457]],["body/controllers/AdminController.html",[0,1.614,1,3.805,2,1.614,3,0.23,4,0.2,5,0.2,6,3.694,7,2.721,8,3.279,9,0.609,10,1.334,11,1.851,12,4.323,13,4.295,14,1.709,15,0.021,16,3.85,17,0.737,18,4.323,19,1.161,20,0.985,21,0.737,22,1.041,23,1.041,24,0.434,25,2.185,26,0.57,27,3.558,28,3.694,29,1.924,30,3.694,31,2.515,32,1.526,33,4.323,34,4.323,35,0.23,36,0.098,37,1.812,38,1.444,39,3.694,40,1.099,41,4.323,42,0.016,43,0.016]],["title/guards/AdminGuard.html",[44,2.457,45,2.713]],["body/guards/AdminGuard.html",[3,0.143,4,0.125,5,0.125,9,0.38,10,0.961,15,0.022,17,0.811,19,1.277,20,1.083,21,0.811,22,1.145,23,0.961,24,0.32,26,0.355,35,0.143,36,0.061,38,1.333,40,1.338,42,0.011,43,0.011,45,3.028,46,1.849,47,2.301,48,1.994,49,3.99,50,3.04,51,3.411,52,1.777,53,2.301,54,4.041,55,2.408,56,2.693,57,3.028,58,3.99,59,2.693,60,2.042,61,2.513,62,3.411,63,1.593,64,2.693,65,4.064,66,3.99,67,0.812,68,4.064,69,1.567,70,2.301,71,1.567,72,2.408,73,3.858,74,2.301,75,2.301,76,2.301,77,2.301,78,2.042,79,2.301,80,2.301,81,2.659,82,2.205,83,3.411,84,2.301,85,2.301,86,2.301,87,2.042,88,3.411,89,1.673,90,2.301,91,2.741,92,2.301,93,3.411,94,3.411,95,3.411,96,4.495,97,3.411,98,3.411,99,1.777,100,2.301,101,2.042,102,2.042,103,2.301,104,2.301,105,2.301,106,3.411,107,2.301,108,1.849,109,2.301,110,2.301,111,2.301,112,2.301,113,2.042,114,2.042,115,3.411,116,2.301,117,2.301,118,2.301,119,2.301]],["title/modules/AdminModule.html",[120,0.861,121,2.252]],["body/modules/AdminModule.html",[1,4.165,2,2.046,3,0.226,4,0.197,5,0.197,15,0.021,24,0.446,26,0.56,27,3.951,28,3.63,35,0.226,36,0.096,42,0.016,43,0.016,69,2.472,99,1.891,101,3.223,102,3.223,120,1.46,121,4.275,122,1.587,123,1.587,124,1.781,125,1.781,126,1.587,127,2.542,128,1.781,129,3.63,130,3.63,131,2.297,132,1.781,133,1.68,134,4.249,135,4.249,136,4.249,137,4.249,138,2.472,139,4.249,140,3.63,141,4.249,142,4.249,143,4.249]],["title/injectables/AdminService.html",[27,2.082,67,0.728]],["body/injectables/AdminService.html",[3,0.161,4,0.14,5,0.14,8,3.298,9,0.427,10,1.047,11,1.7,13,3.501,15,0.022,17,0.741,19,1.168,20,1.267,21,0.741,22,1.047,23,0.729,24,0.396,26,0.399,27,2.53,29,1.347,30,2.586,35,0.161,36,0.068,38,1.011,40,0.77,42,0.012,43,0.012,48,2.133,50,2.353,52,1.935,54,4.338,67,0.885,69,1.761,72,2.329,73,2.986,81,1.53,82,1.269,89,2.133,91,2.079,108,2.079,144,1.269,145,2.586,146,1.761,147,2.57,148,3.028,149,4.348,150,3.028,151,2.296,152,1.906,153,2.53,154,1.761,155,2.986,156,2.079,157,2.753,158,3.298,159,3.715,160,2.29,161,1.935,162,2.586,163,2.961,164,3.028,165,1.906,166,2.586,167,2.586,168,2.586,169,4.348,170,3.028,171,3.028,172,3.028,173,1.761,174,1.906,175,2.353,176,2.737,177,3.028,178,4.347,179,2.079,180,1.906,181,2.296,182,2.296,183,3.028,184,4.348,185,2.586,186,1.906]],["title/controllers/AppController.html",[0,1.336,187,2.457]],["body/controllers/AppController.html",[0,2.121,2,1.679,3,0.239,4,0.208,5,0.208,9,0.634,10,1.367,14,1.777,15,0.021,17,0.766,23,1.082,24,0.419,26,0.592,31,2.616,32,1.587,35,0.239,36,0.102,37,1.884,38,1.501,40,1.143,42,0.016,43,0.016,63,1.611,187,3.901,188,3.841,189,5.59,190,3.841,191,4.853,192,4.495,193,4.495,194,3.624,195,3.841,196,4.853,197,4.495,198,3.841,199,3.087,200,4.495]],["title/modules/AppModule.html",[120,0.861,201,2.457]],["body/modules/AppModule.html",[2,1.653,3,0.165,4,0.144,5,0.144,15,0.021,24,0.465,26,0.409,35,0.165,36,0.07,42,0.013,43,0.013,55,1.227,120,1.242,121,3.892,122,1.159,123,1.159,124,1.301,125,1.301,126,1.159,127,2.162,128,1.301,131,1.855,132,1.301,133,1.227,138,2.575,187,3.543,194,3.597,195,2.651,201,4.989,202,2.651,203,2.651,204,2.651,205,3.892,206,3.892,207,2.928,208,3.892,209,3.892,210,3.892,211,3.892,212,3.892,213,3.103,214,3.103,215,3.103,216,3.103,217,3.103,218,3.103,219,3.103,220,2.131,221,1.953,222,3.103,223,3.103,224,3.103,225,3.103,226,3.103]],["title/injectables/AppService.html",[67,0.728,194,2.082]],["body/injectables/AppService.html",[3,0.264,4,0.23,5,0.23,9,0.7,10,1.454,15,0.021,17,0.846,23,1.194,24,0.334,26,0.654,35,0.264,36,0.112,40,1.262,42,0.017,43,0.017,63,1.712,67,1.229,144,2.08,189,5.788,194,3.514,199,3.408,227,4.239,228,4.962,229,4.962]],["title/controllers/AuthController.html",[0,1.336,230,2.457]],["body/controllers/AuthController.html",[0,1.614,2,1.614,3,0.23,4,0.2,5,0.2,7,2.721,9,0.609,10,1.334,14,1.709,15,0.021,16,2.721,17,0.737,19,1.161,20,0.985,21,0.737,22,1.041,23,1.041,24,0.434,25,3.09,26,0.57,29,1.924,31,2.515,32,1.526,35,0.23,36,0.098,37,1.812,38,1.444,40,1.099,42,0.016,43,0.016,160,2.069,230,3.805,231,3.694,232,2.515,233,3.694,234,4.06,235,5.541,236,4.323,237,3.558,238,2.969,239,3.694,240,4.323,241,4.323,242,4.323,243,4.323]],["title/guards/AuthGuard.html",[44,2.457,244,2.713]],["body/guards/AuthGuard.html",[3,0.148,4,0.129,5,0.129,9,0.393,10,0.986,15,0.021,17,0.828,19,1.304,20,1.106,21,0.828,22,1.169,23,0.986,24,0.326,26,0.368,35,0.148,36,0.063,38,1.369,40,1.361,42,0.012,43,0.012,46,1.916,48,2.035,49,4.059,50,3.085,51,3.501,52,1.824,53,2.383,54,4.093,55,2.436,57,3.107,58,4.059,60,2.116,61,2.579,62,3.501,63,1.617,65,4.149,66,4.059,67,0.834,68,2.383,69,1.623,70,2.383,71,1.623,72,2.436,73,3.915,74,2.383,75,2.383,76,2.383,77,2.383,78,2.116,79,2.383,80,2.383,81,2.071,82,1.717,83,3.501,84,2.383,85,2.383,86,2.383,87,2.116,88,3.501,89,1.717,90,2.383,91,2.814,92,2.383,93,3.501,94,3.501,95,3.501,96,3.501,97,3.501,98,3.501,99,1.824,100,2.383,101,2.116,102,2.116,103,2.383,104,2.383,105,2.383,106,3.501,107,2.383,108,1.916,109,2.383,110,2.383,111,2.383,112,2.383,113,2.116,114,2.116,115,3.501,116,2.383,117,2.383,118,2.383,119,2.383,244,3.107,245,2.383,246,2.79,247,2.79,248,2.79]],["title/modules/AuthModule.html",[120,0.861,205,2.252]],["body/modules/AuthModule.html",[2,2.046,3,0.226,4,0.197,5,0.197,15,0.021,24,0.446,26,0.56,35,0.226,36,0.096,42,0.016,43,0.016,55,1.68,120,1.46,122,1.587,123,1.587,124,1.781,125,1.781,126,1.587,127,2.542,128,1.781,131,2.297,132,1.781,133,1.68,138,3.189,205,4.407,207,3.272,230,4.165,237,3.951,238,2.918,249,3.63,250,4.249,251,3.63,252,4.249,253,3.63,254,2.918,255,2.675]],["title/injectables/AuthService.html",[67,0.728,237,2.082]],["body/injectables/AuthService.html",[3,0.17,4,0.148,5,0.148,9,0.45,10,1.087,15,0.021,17,0.77,19,1.212,20,1.028,21,0.77,22,1.087,23,0.768,24,0.404,25,1.612,26,0.42,29,1.42,35,0.17,36,0.072,38,1.066,40,0.811,42,0.013,43,0.013,48,2.196,50,2.442,52,2.009,54,4.405,67,0.918,69,1.857,72,2.467,73,3.1,81,2.281,82,1.892,89,2.196,91,2.191,144,1.337,146,1.857,147,2.615,152,2.009,153,3.048,154,1.857,155,3.1,157,1.726,160,1.956,163,2.627,173,1.857,175,1.726,176,2.009,179,2.191,180,2.009,181,2.42,182,2.42,185,2.726,186,2.009,233,3.857,234,3.585,237,2.627,239,2.726,256,2.726,257,3.191,258,3.191,259,3.424,260,3.857,261,2.191,262,2.191,263,2.726,264,2.726,265,3.191,266,3.857,267,2.726,268,2.42,269,4.514,270,3.191,271,2.726,272,3.191,273,4.514,274,2.009,275,3.191,276,1.726,277,3.191]],["title/classes/CreateAdminDto.html",[13,2.252,36,0.081]],["body/classes/CreateAdminDto.html",[3,0.238,4,0.208,5,0.208,9,0.631,13,3.568,14,2.458,15,0.021,17,1.06,20,1.416,21,1.06,24,0.301,32,1.581,35,0.238,36,0.101,42,0.016,43,0.016,63,1.952,160,2.322,161,2.767,278,1.673,279,5.583,280,3.827,281,2.241,282,4.069,283,4.479,284,4.479,285,4.479]],["title/classes/CreateRoleDto.html",[36,0.081,286,2.082]],["body/classes/CreateRoleDto.html",[3,0.173,4,0.151,5,0.212,9,0.458,14,2.092,15,0.021,17,0.902,20,1.205,21,0.979,22,1.101,24,0.218,32,1.147,35,0.173,36,0.074,42,0.013,43,0.013,63,1.628,99,3.105,157,1.758,274,3.33,278,1.213,281,1.808,282,3.341,286,2.66,287,4.905,288,2.464,289,3.894,290,2.464,291,5.291,292,3.249,293,3.249,294,3.249,295,3.249,296,4.012,297,4.573,298,3.906,299,3.906,300,3.906,301,3.906,302,3.906,303,3.906,304,3.906,305,3.906,306,3.906,307,3.906,308,3.906,309,3.906,310,5.291,311,3.249,312,3.249,313,2.776,314,3.249,315,2.776]],["title/classes/CreateSessionDto.html",[36,0.081,316,2.082]],["body/classes/CreateSessionDto.html",[3,0.292,4,0.254,5,0.254,15,0.019,35,0.292,36,0.124,42,0.018,43,0.018,278,2.049,316,3.732,317,4.689,318,4.162]],["title/classes/CreateUserDto.html",[36,0.081,319,1.936]],["body/classes/CreateUserDto.html",[3,0.222,4,0.194,5,0.194,9,0.589,14,2.517,15,0.021,17,1.086,20,1.37,21,1.086,22,1.305,24,0.281,32,1.475,35,0.222,36,0.095,42,0.016,43,0.016,63,1.978,160,2.247,161,2.678,163,3.501,278,1.56,281,2.143,282,4.059,319,2.933,320,5.636,321,2.869,322,4.178,323,4.178,324,4.178,325,3.569,326,4.631,327,4.178,328,3.168]],["title/classes/LoginAuthDto.html",[36,0.081,234,2.252]],["body/classes/LoginAuthDto.html",[3,0.251,4,0.219,5,0.219,9,0.665,14,2.315,15,0.021,17,0.998,21,0.998,24,0.317,32,1.665,35,0.251,36,0.107,42,0.017,43,0.017,63,1.888,160,2.377,161,2.833,234,3.685,278,1.761,281,2.315,282,3.982,329,5.439,330,4.03,331,4.717,332,4.717]],["title/modules/PgModule.html",[120,0.861,206,2.252]],["body/modules/PgModule.html",[3,0.23,4,0.2,5,0.2,15,0.021,24,0.373,26,0.57,35,0.23,36,0.098,42,0.016,43,0.016,120,1.472,122,1.614,123,1.614,124,1.812,125,1.812,126,1.614,127,2.563,128,2.563,131,2.322,132,1.812,133,1.709,140,4.734,147,3.049,206,4.367,333,3.694,334,3.694,335,3.694,336,4.323,337,4.323]],["title/injectables/PgService.html",[67,0.728,147,1.499]],["body/injectables/PgService.html",[3,0.147,4,0.128,5,0.128,9,0.39,10,0.98,15,0.022,17,1.013,19,1.093,20,0.927,21,0.824,22,0.98,23,1.283,24,0.325,26,0.536,35,0.147,36,0.063,40,1.035,42,0.012,43,0.012,48,2.814,50,2.614,52,2.15,61,3.355,63,1.824,67,0.828,71,1.609,81,1.397,82,1.706,89,1.706,144,1.159,147,1.706,153,2.368,157,1.496,161,1.23,165,1.74,173,3.305,281,1.609,338,2.362,339,4.219,340,5.076,341,4.506,342,4.831,343,4.071,344,2.765,345,2.765,346,4.071,347,6.304,348,2.765,349,3.087,350,2.765,351,4.127,352,2.765,353,2.097,354,2.362,355,2.362,356,2.765,357,2.362,358,2.362,359,2.765,360,2.765,361,2.765,362,2.765,363,2.765,364,2.765,365,2.362,366,2.765,367,4.071,368,4.071,369,2.765,370,2.765,371,2.765,372,2.765,373,2.765]],["title/classes/RedisIoAdapter.html",[36,0.081,374,2.713]],["body/classes/RedisIoAdapter.html",[3,0.196,4,0.171,5,0.171,9,0.521,10,1.202,15,0.021,17,0.965,19,0.992,20,0.841,21,0.852,22,0.889,23,1.202,24,0.408,35,0.196,36,0.084,40,0.939,42,0.014,43,0.014,48,2.372,50,3.062,61,3.144,72,2.238,89,1.548,199,3.43,278,1.379,281,1.975,349,2.801,358,3.156,374,3.788,375,3.156,376,3.144,377,5.66,378,5.66,379,6.064,380,4.995,381,4.995,382,3.694,383,3.694,384,4.995,385,2.86,386,6.064,387,6.064,388,3.694,389,3.156,390,3.788,391,3.694,392,3.156,393,3.156,394,4.268,395,2.801,396,3.694,397,3.156,398,3.156,399,4.995,400,3.694,401,3.694,402,3.694,403,3.694,404,3.694,405,3.694,406,3.694]],["title/modules/RedisModule.html",[120,0.861,207,1.694]],["body/modules/RedisModule.html",[3,0.236,4,0.206,5,0.206,15,0.021,24,0.379,26,0.586,35,0.3,36,0.101,42,0.016,43,0.016,55,2.887,120,1.491,122,2.107,123,1.661,124,1.864,125,1.864,126,1.661,127,2.597,128,2.597,131,2.365,132,1.864,133,1.758,207,3.307,407,3.799,408,3.799,409,3.799,410,4.447,411,4.447,412,4.447,413,4.447]],["title/injectables/RedisService.html",[55,1.414,67,0.728]],["body/injectables/RedisService.html",[3,0.213,4,0.186,5,0.186,9,0.566,10,1.271,15,0.021,17,1.069,21,0.685,23,1.421,24,0.355,26,0.529,35,0.213,36,0.091,40,1.021,42,0.015,43,0.015,48,2.803,50,3.193,55,2.088,67,1.075,71,2.337,89,2.214,144,1.683,281,2.088,339,4.053,340,5.714,341,5.072,355,4.513,365,3.431,394,4.513,395,3.046,397,3.431,398,3.431,414,3.431,415,6.271,416,4.016,417,6.271,418,4.016,419,4.016,420,4.016,421,4.016]],["title/controllers/RolesController.html",[0,1.336,422,2.457]],["body/controllers/RolesController.html",[0,1.053,2,1.053,3,0.15,4,0.131,5,0.131,7,1.776,9,0.398,10,0.994,11,1.633,14,2.366,15,0.021,16,1.776,17,1.02,19,1.538,20,1.304,21,0.977,22,1.379,23,1.44,24,0.402,25,2.894,26,0.372,29,1.256,31,1.641,32,0.996,35,0.15,36,0.064,37,1.182,38,0.942,40,1.522,42,0.012,43,0.012,63,1.961,232,1.641,262,1.937,276,3.238,286,3.131,422,2.837,423,2.41,424,3.695,425,2.837,426,3.53,427,2.837,428,2.404,429,1.937,430,3.53,431,2.821,432,3.53,433,2.821,434,1.937,435,4.132,436,2.821,437,2.41,438,4.081,439,4.132,440,2.821,441,3.133,442,1.937,443,4.132,444,2.821,445,2.14,446,3.991,447,4.132,448,2.821,449,2.14,450,2.14,451,2.14,452,2.844,453,2.41,454,3.133,455,1.641,456,2.14,457,2.821,458,2.14,459,2.821,460,2.821,461,2.821,462,2.821,463,2.821,464,2.821,465,2.821,466,2.821,467,2.821,468,2.821,469,2.821,470,2.821]],["title/modules/RolesModule.html",[120,0.861,208,2.252]],["body/modules/RolesModule.html",[2,2.046,3,0.226,4,0.197,5,0.197,15,0.021,24,0.446,26,0.56,35,0.226,36,0.096,42,0.016,43,0.016,55,1.68,120,1.46,122,1.587,123,1.587,124,1.781,125,1.781,126,1.587,127,2.542,128,1.781,131,2.297,132,1.781,133,1.68,138,3.189,207,3.272,208,4.407,254,2.918,255,2.675,422,4.165,452,3.951,453,3.63,471,3.63,472,3.63,473,4.249,474,4.249,475,4.249]],["title/injectables/RolesService.html",[67,0.728,452,2.082]],["body/injectables/RolesService.html",[3,0.107,4,0.093,5,0.093,9,0.284,10,0.769,11,1.068,15,0.022,17,0.937,19,1.408,20,1.298,21,0.894,22,1.262,23,1.262,24,0.304,25,2.284,26,0.266,29,0.897,35,0.107,36,0.046,37,0.845,38,0.673,40,1.333,42,0.009,43,0.009,48,2.794,52,0.897,67,0.65,72,2.378,81,1.615,82,1.34,89,2.198,144,0.845,146,1.173,147,2.198,152,3.301,153,2.311,154,1.173,173,3.051,174,1.269,175,1.729,176,2.5,179,3.104,180,3.301,186,3.301,259,2.424,260,3.861,261,2.195,262,3.601,263,2.731,264,2.731,267,2.731,268,3.428,274,2.012,276,3.176,286,2.63,289,1.86,315,2.731,385,3.28,424,3.104,425,2.195,426,2.731,427,2.195,428,2.311,429,2.195,434,2.195,437,2.731,438,3.977,441,3.428,442,2.195,445,2.424,446,2.845,451,1.529,452,1.86,454,2.424,455,1.173,476,1.722,477,2.016,478,2.016,479,2.016,480,2.016,481,2.016,482,2.016,483,2.016,484,1.384,485,2.731,486,3.196,487,3.196,488,2.731,489,3.196,490,3.196,491,2.731,492,3.196,493,3.861,494,2.731,495,1.722,496,1.722,497,1.384]],["title/classes/Session.html",[36,0.081,498,1.808]],["body/classes/Session.html",[3,0.293,4,0.256,5,0.256,15,0.02,35,0.293,36,0.125,42,0.018,43,0.018,278,2.058,498,3.249,499,4.71]],["title/classes/SessionGateway.html",[36,0.081,500,2.457]],["body/classes/SessionGateway.html",[3,0.156,4,0.136,5,0.136,9,0.415,10,1.025,11,1.423,14,2.401,15,0.021,17,1.068,19,1.564,20,1.326,21,0.993,22,1.402,23,1.461,24,0.408,26,0.388,29,1.309,35,0.156,36,0.067,37,1.233,38,0.982,40,1.481,42,0.012,43,0.012,52,1.309,276,2.969,278,1.098,316,3.533,385,3.068,424,3.769,425,2.925,427,2.925,428,2.478,434,2.02,442,2.02,455,1.711,500,2.925,501,2.513,502,5.488,503,2.941,504,3.533,505,2.941,506,2.513,507,4.259,508,2.941,509,4.259,510,2.941,511,4.259,512,2.941,513,2.941,514,2.941,515,2.941,516,4.259,517,2.941,518,2.941,519,3.942,520,4.259,521,2.941,522,4.259,523,2.941,524,2.941,525,2.513,526,2.513,527,3.23,528,2.941,529,2.02,530,2.941,531,4.259,532,2.941,533,2.941,534,2.941,535,2.941,536,2.941,537,2.941,538,2.941,539,2.941,540,2.941,541,2.941,542,2.941,543,2.941]],["title/guards/SessionGuard.html",[44,2.457,529,2.457]],["body/guards/SessionGuard.html",[3,0.218,4,0.19,5,0.19,9,0.579,10,1.291,15,0.021,17,0.701,19,1.103,20,0.936,21,0.701,22,0.989,23,0.989,24,0.401,26,0.541,35,0.218,36,0.093,40,1.045,42,0.015,43,0.015,46,2.822,49,4.977,57,3.116,58,4.798,60,4.066,61,3.375,67,1.091,71,2.391,72,2.12,99,1.829,310,4.066,339,2.822,390,3.116,498,2.076,529,3.682,544,3.51,545,4.109,546,5.969,547,3.51,548,5.362,549,4.109,550,5.969,551,4.109,552,4.109,553,4.109,554,4.109,555,3.51]],["title/modules/SessionModule.html",[120,0.861,209,2.252]],["body/modules/SessionModule.html",[3,0.246,4,0.215,5,0.215,15,0.021,24,0.424,26,0.61,35,0.246,36,0.105,42,0.017,43,0.017,120,1.519,122,1.729,123,1.729,124,1.94,125,1.94,126,1.729,127,2.646,128,1.94,131,2.425,132,1.94,133,1.83,209,4.371,500,3.974,504,4.04,526,3.955,556,3.955,557,3.955,558,4.63,559,4.63]],["title/injectables/SessionService.html",[67,0.728,504,2.082]],["body/injectables/SessionService.html",[3,0.181,4,0.158,5,0.158,9,0.479,10,1.136,11,1.577,15,0.021,17,1.049,19,1.573,20,1.334,21,0.999,22,1.41,23,1.533,24,0.364,26,0.448,29,1.513,35,0.181,36,0.077,40,1.565,42,0.014,43,0.014,63,1.661,67,0.96,82,1.425,144,1.425,276,3.445,316,3.58,357,2.905,385,3.417,424,4.022,425,3.241,427,3.241,428,2.746,434,3.241,442,3.241,445,3.58,455,1.978,498,2.96,504,2.746,506,4.033,519,4.111,527,3.58,560,2.905,561,3.4,562,3.4,563,3.4,564,3.4,565,3.4,566,5.857,567,3.4,568,2.905,569,3.4]],["title/modules/TablesModule.html",[120,0.861,210,2.252]],["body/modules/TablesModule.html",[3,0.252,4,0.219,5,0.219,15,0.021,24,0.394,26,0.624,35,0.252,36,0.107,42,0.017,43,0.017,120,1.535,122,1.768,123,1.768,124,1.985,125,1.985,126,1.768,127,2.673,128,1.985,131,2.46,132,1.985,133,1.872,210,4.395,570,4.046,571,4.046,572,4.395,573,4.735,574,4.735]],["title/injectables/TablesService.html",[67,0.728,572,2.252]],["body/injectables/TablesService.html",[3,0.095,4,0.083,5,0.083,8,1.353,9,0.653,10,0.697,11,1.747,15,0.022,17,0.892,19,0.479,20,1.241,21,0.304,22,0.429,23,1.195,24,0.195,26,0.235,35,0.095,36,0.04,37,0.748,38,0.596,42,0.008,43,0.008,48,2.729,52,0.794,66,1.353,67,0.59,71,1.038,72,1.832,89,2.427,99,2.922,144,0.748,146,1.038,147,2.081,154,1.038,156,2.893,158,3.967,159,4.469,160,1.953,161,1.29,162,1.524,163,2.696,165,2.917,166,3.126,167,3.959,168,3.126,174,1.824,175,2.949,262,3.976,274,1.824,276,1.568,289,1.686,298,3.126,299,3.126,300,3.126,301,3.126,302,3.126,303,3.126,304,3.126,305,3.126,306,3.126,307,3.126,308,3.126,309,3.126,310,1.353,326,5.69,341,3.765,451,2.198,484,1.99,497,1.225,498,0.902,572,1.824,575,1.524,576,4.213,577,4.213,578,4.213,579,4.213,580,4.213,581,1.784,582,1.784,583,1.784,584,1.784,585,1.784,586,1.784,587,1.784,588,1.784,589,1.784,590,1.524,591,1.784,592,1.784,593,1.784,594,1.784,595,3.66,596,2.898,597,1.784,598,1.784,599,3.66,600,3.66,601,3.66,602,1.784,603,3.66,604,1.784,605,3.66,606,2.476,607,2.898,608,2.898,609,2.898,610,1.784,611,1.784,612,2.898,613,2.898,614,1.784,615,1.784,616,1.784,617,1.784,618,1.784,619,1.784,620,3.195,621,1.353,622,1.784,623,1.524,624,1.784,625,1.524,626,1.784,627,1.784,628,1.784]],["title/controllers/TgAuthController.html",[0,1.336,629,2.457]],["body/controllers/TgAuthController.html",[0,0.946,2,0.946,3,0.135,4,0.117,5,0.117,7,1.595,9,0.357,10,0.918,11,1.274,14,1.814,15,0.021,16,1.595,17,0.782,19,1.232,20,1.045,21,1.109,22,1.104,23,1.104,24,0.343,25,3.177,26,0.334,31,1.474,32,0.894,35,0.135,36,0.057,37,1.062,38,0.846,40,1.166,42,0.011,43,0.011,63,1.89,82,1.599,157,2.064,160,2.148,190,3.919,196,4.361,198,3.919,220,2.619,221,3.213,232,2.97,238,1.74,281,1.508,289,3.186,290,3.871,296,2.893,385,2.767,449,1.921,450,1.921,456,1.921,458,1.921,621,2.893,629,2.619,630,3.505,631,2.164,632,3.259,633,4.678,634,4.915,635,2.164,636,3.814,637,5.249,638,2.534,639,2.534,640,3.814,641,2.534,642,2.164,643,2.534,644,4.361,645,3.814,646,5.105,647,3.814,648,2.534,649,2.534,650,2.164,651,2.534,652,3.919,653,2.534,654,2.534,655,2.669,656,5.105,657,4.587,658,2.534,659,2.534,660,1.921,661,3.814,662,2.534,663,2.534,664,2.534,665,2.164,666,2.534,667,2.534,668,3.259,669,2.534,670,3.814,671,2.534,672,2.534,673,2.534,674,2.534,675,2.534,676,2.534,677,2.534]],["title/modules/TgAuthModule.html",[120,0.861,211,2.252]],["body/modules/TgAuthModule.html",[2,2.028,3,0.223,4,0.194,5,0.194,15,0.021,24,0.444,26,0.552,35,0.223,36,0.095,42,0.016,43,0.016,55,1.657,120,1.45,122,1.565,123,1.565,124,1.757,125,1.757,126,1.565,127,2.526,128,1.757,131,2.277,132,1.757,133,1.657,138,3.161,207,3.262,211,4.394,220,3.73,221,2.639,238,2.879,253,3.581,254,2.879,255,2.639,629,4.138,630,2.879,655,3.937,678,3.581,679,3.581,680,4.192,681,4.192]],["title/injectables/TgAuthService.html",[67,0.728,655,2.082]],["body/injectables/TgAuthService.html",[3,0.079,4,0.069,5,0.069,9,0.21,10,0.602,11,1.262,15,0.022,17,0.644,19,1.014,20,0.86,21,0.644,22,0.909,23,0.777,24,0.254,26,0.197,35,0.079,36,0.034,37,0.626,38,0.499,40,0.961,42,0.007,43,0.007,48,2.21,52,0.664,63,1.712,67,0.509,72,2.449,81,2.664,82,2.4,87,3.452,89,2.565,99,0.664,108,1.718,114,3.452,144,0.626,146,0.868,147,1.908,152,2.032,153,2.198,154,0.868,156,2.217,157,2.852,158,2.448,160,2.362,173,2.448,174,2.032,175,1.353,176,2.648,180,2.032,186,2.032,220,1.718,221,2.648,255,0.94,339,3.126,385,2.126,428,2.448,484,1.718,497,2.217,498,2.751,555,2.758,606,1.275,620,4.243,621,4.881,623,4.504,625,1.275,630,2.889,632,2.137,633,2.137,634,2.137,635,2.137,637,3.594,642,2.137,644,2.137,650,2.137,652,2.137,655,1.455,660,2.865,668,3.594,682,1.275,683,1.493,684,1.493,685,1.493,686,1.493,687,1.493,688,2.448,689,1.493,690,1.493,691,3.228,692,3.228,693,3.228,694,3.228,695,5.072,696,2.501,697,2.137,698,2.137,699,2.137,700,2.137,701,1.493,702,3.228,703,1.493,704,1.493,705,1.493,706,1.275,707,1.493,708,1.493,709,1.493,710,1.493,711,1.493,712,1.493,713,1.493,714,4.207,715,4.207,716,1.493,717,1.493,718,1.493,719,1.493,720,1.493,721,2.501,722,1.493,723,3.228,724,1.493,725,1.493,726,1.493,727,1.493,728,1.493]],["title/classes/UpdateRoleDto.html",[36,0.081,446,2.252]],["body/classes/UpdateRoleDto.html",[3,0.274,4,0.239,5,0.239,11,1.719,15,0.021,24,0.415,32,1.817,35,0.274,36,0.116,42,0.018,43,0.018,278,1.922,286,2.995,288,3.904,376,3.887,446,3.887,454,3.904,729,4.398,730,6.175,731,3.535]],["title/classes/UpdateSessionDto.html",[36,0.081,519,2.252]],["body/classes/UpdateSessionDto.html",[3,0.258,4,0.225,5,0.225,9,0.683,11,1.619,15,0.021,17,0.826,21,0.826,24,0.4,35,0.258,36,0.11,42,0.017,43,0.017,276,3.486,278,1.81,281,2.353,316,2.82,318,3.675,376,3.747,385,3.008,519,3.747,527,3.675,731,3.328,732,5.086,733,5.953,734,4.846,735,3.328,736,3.328]],["title/classes/UpdateUserDto.html",[36,0.081,737,2.082]],["body/classes/UpdateUserDto.html",[3,0.247,4,0.215,5,0.215,11,1.552,15,0.021,24,0.425,32,1.64,35,0.308,36,0.131,42,0.017,43,0.017,63,1.318,72,2.293,99,2.068,160,2.166,161,2.068,278,1.735,282,3.375,319,2.514,321,3.191,328,3.524,376,3.651,731,4.342,735,3.191,736,3.191,737,3.375,738,3.524,739,4.955,740,3.97,741,3.191,742,2.704]],["title/classes/UpdateUserPasswordDto.html",[36,0.081,742,2.082]],["body/classes/UpdateUserPasswordDto.html",[3,0.239,4,0.208,5,0.208,9,0.634,11,1.501,14,1.777,15,0.021,17,0.766,21,0.766,24,0.419,32,1.587,35,0.302,36,0.129,42,0.016,43,0.016,63,1.611,72,1.777,99,2.528,160,1.679,161,2.772,278,1.679,281,2.246,282,3.305,319,2.432,321,3.087,325,3.841,328,3.409,376,2.83,731,3.901,735,3.087,736,3.087,737,2.616,738,4.308,739,3.841,740,3.841,741,3.087,742,3.305,743,4.495]],["title/controllers/UsersController.html",[0,1.336,744,2.457]],["body/controllers/UsersController.html",[0,1.08,2,1.08,3,0.154,4,0.134,5,0.134,7,1.821,9,0.408,10,1.013,11,1.406,14,2.288,15,0.021,16,1.821,17,0.987,19,1.462,20,1.24,21,1.029,22,1.311,23,1.393,24,0.406,25,3.226,26,0.381,29,1.288,31,1.684,32,1.021,35,0.154,36,0.065,37,1.213,38,0.966,39,2.472,40,1.471,42,0.012,43,0.012,63,1.544,78,3.192,151,4.388,157,2.277,160,1.852,161,1.873,175,1.565,232,2.886,290,3.192,319,2.946,429,1.987,430,2.472,432,2.472,449,2.194,450,2.194,455,1.684,456,2.194,458,3.761,665,2.472,737,3.715,741,2.89,742,3.169,744,2.89,745,2.472,746,4.653,747,3.595,748,4.237,749,4.237,750,2.894,751,2.894,752,2.894,753,2.894,754,2.472,755,2.894,756,2.894,757,2.894,758,2.894,759,2.894,760,2.472,761,2.894,762,4.209,763,2.894,764,2.886,765,2.472,766,2.894,767,2.894,768,2.894,769,2.894,770,2.894,771,2.894,772,2.894,773,4.209,774,2.894,775,2.894]],["title/modules/UsersModule.html",[120,0.861,212,2.252]],["body/modules/UsersModule.html",[2,2.046,3,0.226,4,0.197,5,0.197,15,0.021,24,0.446,26,0.56,35,0.226,36,0.096,42,0.016,43,0.016,55,1.68,120,1.46,122,1.587,123,1.587,124,1.781,125,1.781,126,1.587,127,2.542,128,1.781,131,2.297,132,1.781,133,1.68,138,3.189,207,3.272,212,4.407,254,2.918,255,2.675,744,4.165,764,3.951,765,3.63,776,3.63,777,4.249,778,3.63,779,4.249,780,4.249]],["title/injectables/UsersService.html",[67,0.728,764,2.082]],["body/injectables/UsersService.html",[3,0.094,4,0.082,5,0.082,9,0.249,10,0.692,11,0.96,15,0.022,17,0.888,19,1.327,20,1.278,21,0.842,22,1.189,23,1.189,24,0.332,25,2.632,26,0.233,29,0.786,35,0.094,36,0.04,37,0.74,38,0.59,40,1.256,42,0.008,43,0.008,48,2.724,52,0.786,63,1.401,67,0.585,72,2.52,81,1.453,82,1.205,89,2.525,144,0.74,146,1.028,147,2.071,151,1.34,152,3.11,153,2.115,154,1.028,155,1.974,160,2.38,161,1.864,163,2.115,173,3.159,174,1.112,175,3.037,176,2.636,178,1.509,179,2.876,180,3.417,181,1.34,182,2.18,186,3.11,259,2.18,261,1.974,266,3.105,268,1.34,271,3.105,274,1.809,319,2.266,385,2.497,428,2.437,429,1.974,438,3.176,441,2.18,455,1.028,484,1.213,485,3.105,488,1.509,491,2.456,493,3.938,494,2.456,495,1.509,496,1.509,497,2.876,620,2.18,737,2.437,741,1.974,742,2.437,746,3.578,747,2.456,748,2.456,749,2.456,754,2.456,760,2.456,764,1.672,781,1.509,782,2.874,783,1.766,784,1.766,785,1.766,786,1.766,787,2.874,788,1.766,789,2.874,790,1.766,791,1.766,792,1.766,793,4.188,794,2.874,795,2.874,796,3.635,797,2.874,798,1.766,799,2.874,800,2.874,801,1.766,802,1.766,803,4.941,804,3.635,805,3.105,806,1.766,807,3.635,808,1.766,809,1.766]],["title/coverage.html",[810,3.707]],["body/coverage.html",[0,2.222,1,1.907,5,0.129,6,2.373,13,1.748,15,0.021,21,0.473,27,1.616,36,0.152,42,0.012,43,0.012,44,3.326,45,2.106,47,2.373,55,1.098,67,1.332,82,1.164,126,1.037,145,2.373,147,1.164,156,1.907,187,1.907,188,2.373,194,1.616,221,2.571,227,2.373,230,1.907,231,2.373,232,1.616,234,1.748,237,1.616,244,2.106,245,2.373,256,2.373,279,2.373,280,2.373,286,1.616,287,2.373,288,3.097,316,1.616,317,2.373,318,3.097,319,1.502,320,2.373,321,3.326,329,2.373,330,2.373,338,2.373,374,2.106,375,2.373,414,2.373,422,1.907,423,2.373,446,1.748,452,1.616,476,2.373,498,1.403,499,2.373,500,1.907,501,2.373,504,1.616,519,1.748,529,1.907,544,2.373,560,2.373,572,1.748,575,2.373,629,1.907,630,2.804,631,2.373,655,1.616,682,2.373,688,2.106,729,2.373,732,2.373,737,1.616,738,3.097,742,1.616,744,1.907,745,2.373,764,1.616,781,2.373,810,2.106,811,2.373,812,2.777,813,2.777,814,7.342,815,6.152,816,5.951,817,4.844,818,2.373,819,4.844,820,6.312,821,2.373,822,4.084,823,3.097,824,2.777,825,2.373,826,4.844,827,5.341,828,4.084,829,2.777]],["title/dependencies.html",[123,1.607,830,2.55]],["body/dependencies.html",[15,0.021,26,0.608,32,1.628,42,0.017,43,0.017,69,2.684,123,1.722,155,3.167,354,3.94,389,4.932,390,4.378,392,3.94,393,3.94,395,3.498,525,3.94,547,3.94,660,3.498,735,3.167,736,3.167,831,6.302,832,4.612,833,4.612,834,4.612,835,5.773,836,4.612,837,4.612,838,4.612,839,4.612,840,4.612,841,4.612,842,4.612,843,4.612,844,4.612,845,4.612,846,4.612]],["title/miscellaneous/functions.html",[847,2.05,848,3.677]],["body/miscellaneous/functions.html",[9,0.686,15,0.019,19,1.602,20,1.359,21,0.829,22,1.436,42,0.017,43,0.017,63,1.692,126,2.41,163,2.831,165,3.062,232,3.472,349,3.69,353,3.69,498,2.459,688,4.525,697,5.098,698,4.156,699,5.098,700,4.156,818,4.156,821,4.156,823,3.69,847,3.341,848,4.156,849,4.865,850,4.865,851,4.156,852,4.865,853,4.865]],["title/index.html",[9,0.421,854,2.985,855,2.985]],["body/index.html",[4,0.151,15,0.02,42,0.013,43,0.013,113,4.012,133,2.27,191,3.906,199,2.231,261,2.231,289,1.89,296,4.012,313,2.776,351,4.905,568,2.776,590,5.509,810,2.464,811,2.776,856,3.249,857,3.249,858,5.291,859,3.249,860,3.249,861,3.249,862,3.249,863,3.249,864,5.291,865,3.249,866,3.249,867,3.249,868,5.742,869,3.249,870,6.448,871,3.249,872,3.249,873,3.249,874,3.249,875,4.573,876,3.249,877,3.249,878,3.249,879,5.291,880,3.249,881,3.249,882,3.249,883,3.249,884,3.249,885,3.249,886,3.249,887,3.249,888,3.249,889,5.742,890,4.573,891,3.249,892,5.291,893,3.249,894,4.905,895,4.573,896,3.249,897,3.249,898,3.249,899,3.249,900,3.249,901,3.249,902,5.291,903,3.249,904,3.249,905,4.573,906,3.249,907,3.249,908,3.249,909,3.249,910,3.249,911,3.249,912,3.249,913,3.249,914,3.249,915,3.249,916,4.573,917,3.249,918,3.249,919,3.249,920,3.249,921,3.249,922,4.573,923,3.249,924,3.249,925,3.249,926,4.573,927,4.573,928,3.249,929,3.249,930,3.249,931,3.249,932,3.249,933,3.249,934,3.249,935,3.249,936,3.249,937,3.249,938,2.776,939,3.249,940,3.249,941,3.249,942,3.249,943,3.249,944,3.249,945,3.249]],["title/modules.html",[122,1.825]],["body/modules.html",[15,0.017,42,0.017,43,0.017,121,2.936,122,1.742,201,3.203,205,2.936,206,2.936,207,2.209,208,2.936,209,2.936,210,2.936,211,2.936,212,2.936,894,6.186,946,7.241,947,7.241,948,7.241]],["title/overview.html",[949,4.176]],["body/overview.html",[2,1.147,15,0.021,27,2.985,42,0.013,43,0.013,46,2.11,55,2.508,120,0.739,121,3.729,122,1.147,123,1.147,124,1.288,125,1.288,126,1.147,127,1.288,128,1.288,129,2.625,130,2.625,131,1.842,132,1.288,133,1.215,144,1.288,147,2.659,194,2.985,201,4.957,202,2.625,203,2.625,204,2.625,205,3.994,206,3.879,207,3.174,208,3.994,209,3.729,210,3.729,211,3.994,212,3.994,237,2.985,249,2.625,251,2.625,278,1.147,333,2.625,334,2.625,335,2.625,407,2.625,408,2.625,409,2.625,452,2.985,471,2.625,472,2.625,504,2.985,556,2.625,557,2.625,570,2.625,571,2.625,572,3.23,655,2.985,678,2.625,679,2.625,706,2.625,764,2.985,776,2.625,778,2.625,805,3.754,949,2.625,950,3.072,951,3.072]],["title/properties.html",[281,1.702,830,2.55]],["body/properties.html",[15,0.02,42,0.018,43,0.018,281,2.151,289,3.165,938,4.648,952,5.44,953,5.44,954,5.44,955,5.44,956,5.44,957,5.44,958,5.44]],["title/miscellaneous/variables.html",[847,2.05,959,3.677]],["body/miscellaneous/variables.html",[9,0.767,15,0.02,42,0.018,43,0.018,99,2.421,165,3.425,353,4.126,823,4.126,825,5.451,847,3.736,851,4.648,959,4.648,960,5.44]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["0.2.0",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["0.2.1",{"_index":953,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":108,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/TgAuthService.html":{}}}],["10",{"_index":805,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["10.0.0",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["10.4.3",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":951,"title":{},"body":{"overview.html":{}}}],["12345",{"_index":669,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["2",{"_index":705,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["2.25.9",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":107,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["2a$10$ufymscvdfovtdfkwwjjjxenqpxvfyjfi0w7hdocnqtkdv7ko8xrzu",{"_index":618,"title":{},"body":{"injectables/TablesService.html":{}}}],["3",{"_index":706,"title":{},"body":{"injectables/TgAuthService.html":{},"overview.html":{}}}],["4",{"_index":707,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["4.7.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["404",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["418",{"_index":373,"title":{},"body":{"injectables/PgService.html":{}}}],["5.1.1",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":950,"title":{},"body":{"overview.html":{}}}],["60",{"_index":106,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["7.4.2",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["8.13.0",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["8.3.0",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["9996624545",{"_index":662,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["9_",{"_index":371,"title":{},"body":{"injectables/PgService.html":{}}}],["access",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/UsersService.html":{}}}],["access_token",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["action",{"_index":566,"title":{},"body":{"injectables/SessionService.html":{}}}],["adapter",{"_index":393,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["adapterconstructor",{"_index":378,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["add",{"_index":728,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["adding",{"_index":111,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["adds",{"_index":567,"title":{},"body":{"injectables/SessionService.html":{}}}],["admin",{"_index":8,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/TablesService.html":{}}}],["admin.controller",{"_index":135,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.dto",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["admin.dto.ts",{"_index":280,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:5",{"_index":284,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:7",{"_index":283,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:9",{"_index":285,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.service",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["admincontroller",{"_index":1,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminguard",{"_index":45,"title":{"guards/AdminGuard.html":{}},"body":{"guards/AdminGuard.html":{},"coverage.html":{}}}],["adminmodule",{"_index":121,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminservice",{"_index":27,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["akbarkhon",{"_index":957,"title":{},"body":{"properties.html":{}}}],["amazing",{"_index":932,"title":{},"body":{"index.html":{}}}],["api",{"_index":690,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["api.auth.signin",{"_index":720,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["apibadrequestresponse",{"_index":656,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["apibody",{"_index":657,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["apihash",{"_index":699,"title":{},"body":{"injectables/TgAuthService.html":{},"miscellaneous/functions.html":{}}}],["apiid",{"_index":697,"title":{},"body":{"injectables/TgAuthService.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":196,"title":{},"body":{"controllers/AppController.html":{},"controllers/TgAuthController.html":{}}}],["apioperation({summary",{"_index":190,"title":{},"body":{"controllers/AppController.html":{},"controllers/TgAuthController.html":{}}}],["apiproperty",{"_index":282,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["apiproperty({example",{"_index":291,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["apiproperty({required",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["apitags",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{}}}],["apitags('app",{"_index":197,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('authentification",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('roles",{"_index":457,"title":{},"body":{"controllers/RolesController.html":{}}}],["apitags('telegram",{"_index":658,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["apitags('users",{"_index":766,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":195,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":187,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":905,"title":{},"body":{"index.html":{}}}],["applications",{"_index":863,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":201,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":194,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":48,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["audio",{"_index":312,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["auth",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["auth('admin",{"_index":458,"title":{},"body":{"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["auth('admin')@get('all",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth('admin')@patch('update",{"_index":761,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth('admin')@post('create",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth()@get('profile",{"_index":755,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth()@patch('update",{"_index":758,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth(role",{"_index":852,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth.controller",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"modules/TgAuthModule.html":{}}}],["auth.controller.ts",{"_index":631,"title":{},"body":{"controllers/TgAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:34",{"_index":649,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["auth.controller.ts:58",{"_index":654,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["auth.controller.ts:67",{"_index":641,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["auth.dto",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.dto.ts",{"_index":330,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:5",{"_index":331,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.dto.ts:7",{"_index":332,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.module",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.module.ts",{"_index":681,"title":{},"body":{"modules/TgAuthModule.html":{}}}],["auth.service",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{}}}],["auth.service.ts",{"_index":682,"title":{},"body":{"injectables/TgAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:10",{"_index":685,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["auth.service.ts:130",{"_index":684,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["auth.service.ts:7",{"_index":683,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["auth.service.ts:80",{"_index":686,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["auth/auth.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tg",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"coverage.html":{}}}],["authcontroller",{"_index":230,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":244,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authmodule",{"_index":205,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":938,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":237,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":413,"title":{},"body":{"modules/RedisModule.html":{}}}],["avazkhonov",{"_index":958,"title":{},"body":{"properties.html":{}}}],["avoid",{"_index":608,"title":{},"body":{"injectables/TablesService.html":{}}}],["await",{"_index":89,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":956,"title":{},"body":{"properties.html":{}}}],["backers",{"_index":933,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":155,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{}}}],["bcrypt.hash(body.password",{"_index":804,"title":{},"body":{"injectables/UsersService.html":{}}}],["board",{"_index":925,"title":{},"body":{"index.html":{}}}],["body",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.description",{"_index":487,"title":{},"body":{"injectables/RolesService.html":{}}}],["body.login",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["body.name",{"_index":485,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["body.password",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["body.phonecode",{"_index":674,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["body.phonenumber",{"_index":667,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["body.role",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{}}}],["boolean",{"_index":310,"title":{},"body":{"classes/CreateRoleDto.html":{},"guards/SessionGuard.html":{},"injectables/TablesService.html":{}}}],["bootstrap",{"_index":126,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":948,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":946,"title":{},"body":{"modules.html":{}}}],["building",{"_index":859,"title":{},"body":{"index.html":{}}}],["can_create_group",{"_index":309,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_delete",{"_index":300,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_manage_user",{"_index":297,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["can_manage_users",{"_index":605,"title":{},"body":{"injectables/TablesService.html":{}}}],["can_read",{"_index":299,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_read_audio",{"_index":302,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_read_file",{"_index":308,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_read_photo",{"_index":306,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_read_video",{"_index":304,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_send_audio",{"_index":301,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_send_file",{"_index":307,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_send_photo",{"_index":305,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_send_video",{"_index":303,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["can_write",{"_index":298,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/TablesService.html":{}}}],["canactivate",{"_index":49,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":57,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"guards/SessionGuard.html":{}}}],["cascade",{"_index":627,"title":{},"body":{"injectables/TablesService.html":{}}}],["catch",{"_index":114,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/TgAuthService.html":{}}}],["channel",{"_index":897,"title":{},"body":{"index.html":{}}}],["chat",{"_index":311,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["check",{"_index":351,"title":{},"body":{"injectables/PgService.html":{},"index.html":{}}}],["class",{"_index":36,"title":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/RedisIoAdapter.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["classes",{"_index":278,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/RedisIoAdapter.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"overview.html":{}}}],["client",{"_index":339,"title":{},"body":{"injectables/PgService.html":{},"injectables/RedisService.html":{},"guards/SessionGuard.html":{},"injectables/TgAuthService.html":{}}}],["client.disconnect",{"_index":555,"title":{},"body":{"guards/SessionGuard.html":{},"injectables/TgAuthService.html":{}}}],["client.handshake.headers",{"_index":552,"title":{},"body":{"guards/SessionGuard.html":{}}}],["client.invoke",{"_index":719,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["client.isuserauthorized",{"_index":725,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["client.sendcode",{"_index":696,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["client.session.save",{"_index":702,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["cluster_adminmodule",{"_index":129,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":130,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_pgmodule",{"_index":333,"title":{},"body":{"modules/PgModule.html":{},"overview.html":{}}}],["cluster_pgmodule_exports",{"_index":334,"title":{},"body":{"modules/PgModule.html":{},"overview.html":{}}}],["cluster_pgmodule_providers",{"_index":335,"title":{},"body":{"modules/PgModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":407,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":409,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":408,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":471,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_imports",{"_index":473,"title":{},"body":{"modules/RolesModule.html":{}}}],["cluster_rolesmodule_providers",{"_index":472,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":556,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_providers",{"_index":557,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_tablesmodule",{"_index":570,"title":{},"body":{"modules/TablesModule.html":{},"overview.html":{}}}],["cluster_tablesmodule_providers",{"_index":571,"title":{},"body":{"modules/TablesModule.html":{},"overview.html":{}}}],["cluster_tgauthmodule",{"_index":678,"title":{},"body":{"modules/TgAuthModule.html":{},"overview.html":{}}}],["cluster_tgauthmodule_imports",{"_index":680,"title":{},"body":{"modules/TgAuthModule.html":{}}}],["cluster_tgauthmodule_providers",{"_index":679,"title":{},"body":{"modules/TgAuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":776,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":777,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":778,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":652,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["code'})@apibadrequestresponse({description",{"_index":638,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["code/:login",{"_index":640,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["come",{"_index":886,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":606,"title":{},"body":{"injectables/TablesService.html":{},"injectables/TgAuthService.html":{}}}],["connection",{"_index":531,"title":{},"body":{"classes/SessionGateway.html":{}}}],["connecttoredis",{"_index":379,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["consider",{"_index":110,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["console.error('error",{"_index":116,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["console.log('new",{"_index":534,"title":{},"body":{"classes/SessionGateway.html":{}}}],["console.log('phonecodehash",{"_index":701,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["console.log('user",{"_index":716,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["console.log(cookie",{"_index":553,"title":{},"body":{"guards/SessionGuard.html":{}}}],["const",{"_index":72,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RolesService.html":{},"guards/SessionGuard.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":52,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(jwtservice",{"_index":53,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["constructor(pgservice",{"_index":146,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(sessionservice",{"_index":503,"title":{},"body":{"classes/SessionGateway.html":{}}}],["context",{"_index":60,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"guards/SessionGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":79,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["context.switchtows().getclient",{"_index":549,"title":{},"body":{"guards/SessionGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('auth",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('roles",{"_index":459,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('tg",{"_index":659,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["controller('users",{"_index":767,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":550,"title":{},"body":{"guards/SessionGuard.html":{}}}],["cookie.startswith('token",{"_index":76,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["cookies",{"_index":65,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["count(u.login",{"_index":489,"title":{},"body":{"injectables/RolesService.html":{}}}],["courses",{"_index":903,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":810,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":11,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UsersController.html":{}}}],["create(@messagebody",{"_index":535,"title":{},"body":{"classes/SessionGateway.html":{}}}],["create(body",{"_index":429,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(createadmindto",{"_index":12,"title":{},"body":{"controllers/AdminController.html":{}}}],["create(createsessiondto",{"_index":506,"title":{},"body":{"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["create(req",{"_index":149,"title":{},"body":{"injectables/AdminService.html":{}}}],["createadapter",{"_index":391,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createadapter(pubclient",{"_index":404,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createadmindto",{"_index":13,"title":{"classes/CreateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["createclient",{"_index":394,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{}}}],["created_at",{"_index":599,"title":{},"body":{"injectables/TablesService.html":{}}}],["createdefaultroles",{"_index":576,"title":{},"body":{"injectables/TablesService.html":{}}}],["createdefaultusers",{"_index":577,"title":{},"body":{"injectables/TablesService.html":{}}}],["createioserver",{"_index":380,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver(port",{"_index":384,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createroledto",{"_index":286,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createroles",{"_index":578,"title":{},"body":{"injectables/TablesService.html":{}}}],["createsessiondto",{"_index":316,"title":{"classes/CreateSessionDto.html":{}},"body":{"classes/CreateSessionDto.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["createtgusers",{"_index":579,"title":{},"body":{"injectables/TablesService.html":{}}}],["createuserdto",{"_index":319,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createusers",{"_index":580,"title":{},"body":{"injectables/TablesService.html":{}}}],["creating",{"_index":591,"title":{},"body":{"injectables/TablesService.html":{}}}],["current_timestamp",{"_index":601,"title":{},"body":{"injectables/TablesService.html":{}}}],["data",{"_index":493,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":363,"title":{},"body":{"injectables/PgService.html":{}}}],["day",{"_index":109,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["declarations",{"_index":125,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"controllers/RolesController.html":{},"classes/SessionGateway.html":{},"controllers/TgAuthController.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":899,"title":{},"body":{"index.html":{}}}],["default",{"_index":165,"title":{},"body":{"injectables/AdminService.html":{},"injectables/PgService.html":{},"injectables/TablesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":451,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{}}}],["delete('one/:id",{"_index":443,"title":{},"body":{"controllers/RolesController.html":{}}}],["dependencies",{"_index":123,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":802,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":289,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":872,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":910,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":712,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["discord",{"_index":896,"title":{},"body":{"index.html":{}}}],["dive",{"_index":898,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":811,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv/config",{"_index":137,"title":{},"body":{"modules/AdminModule.html":{}}}],["dto/create",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":455,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicates",{"_index":609,"title":{},"body":{"injectables/TablesService.html":{}}}],["e",{"_index":714,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["e2e",{"_index":881,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":860,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":915,"title":{},"body":{"index.html":{}}}],["enum('admin",{"_index":164,"title":{},"body":{"injectables/AdminService.html":{}}}],["error",{"_index":115,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["euphoria",{"_index":954,"title":{},"body":{"properties.html":{}}}],["ex",{"_index":105,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["example",{"_index":296,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/TgAuthController.html":{},"index.html":{}}}],["excluded.\"login",{"_index":710,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["excluded.\"phonecodehash",{"_index":708,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["excluded.\"session",{"_index":709,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["execute",{"_index":711,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["executioncontext",{"_index":58,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"guards/SessionGuard.html":{}}}],["exists",{"_index":158,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{}}}],["experience",{"_index":901,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":112,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["expiresin",{"_index":142,"title":{},"body":{"modules/AdminModule.html":{}}}],["export",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":128,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":376,"title":{},"body":{"classes/RedisIoAdapter.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["extracttokenfromcookies",{"_index":51,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["extracttokenfromcookies(cookies",{"_index":62,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["failed",{"_index":119,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["false",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/TablesService.html":{}}}],["few",{"_index":884,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":691,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["find((cookie",{"_index":75,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["findall",{"_index":424,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["findone",{"_index":425,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["findone(@messagebody",{"_index":538,"title":{},"body":{"classes/SessionGateway.html":{}}}],["findone(@param('id",{"_index":465,"title":{},"body":{"controllers/RolesController.html":{}}}],["findone(id",{"_index":434,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["findsome",{"_index":426,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findsome(@param('take",{"_index":462,"title":{},"body":{"controllers/RolesController.html":{}}}],["findsome(take",{"_index":437,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["follow",{"_index":918,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":612,"title":{},"body":{"injectables/TablesService.html":{}}}],["found",{"_index":84,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["framework",{"_index":858,"title":{},"body":{"index.html":{}}}],["fs",{"_index":792,"title":{},"body":{"injectables/UsersService.html":{}}}],["full",{"_index":914,"title":{},"body":{"index.html":{}}}],["function",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":848,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["get('all",{"_index":432,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get('one/:id",{"_index":435,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('profile",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('some/:take/:skip",{"_index":439,"title":{},"body":{"controllers/RolesController.html":{}}}],["getall",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getclient",{"_index":415,"title":{},"body":{"injectables/RedisService.html":{}}}],["getprofile",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprofile(@request",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":754,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getsome",{"_index":782,"title":{},"body":{"injectables/UsersService.html":{}}}],["getsome(take",{"_index":787,"title":{},"body":{"injectables/UsersService.html":{}}}],["getting",{"_index":854,"title":{"index.html":{}},"body":{}}],["global",{"_index":140,"title":{},"body":{"modules/AdminModule.html":{},"modules/PgModule.html":{}}}],["graph",{"_index":906,"title":{},"body":{"index.html":{}}}],["group",{"_index":315,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/RolesService.html":{}}}],["grow",{"_index":929,"title":{},"body":{"index.html":{}}}],["guard",{"_index":44,"title":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"guards/SessionGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":46,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"guards/SessionGuard.html":{},"overview.html":{}}}],["handleconnection",{"_index":502,"title":{},"body":{"classes/SessionGateway.html":{}}}],["hands",{"_index":900,"title":{},"body":{"index.html":{}}}],["handy",{"_index":887,"title":{},"body":{"index.html":{}}}],["hashed_password",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{}}}],["hashedpassword",{"_index":803,"title":{},"body":{"injectables/UsersService.html":{}}}],["headers",{"_index":551,"title":{},"body":{"guards/SessionGuard.html":{}}}],["help",{"_index":912,"title":{},"body":{"index.html":{}}}],["here",{"_index":936,"title":{},"body":{"index.html":{}}}],["host",{"_index":356,"title":{},"body":{"injectables/PgService.html":{}}}],["httpexception",{"_index":153,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["httpexception('phone_code_invalid",{"_index":726,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["httpexception(e",{"_index":715,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["https://nestjs.com",{"_index":942,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":687,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["httpstatus.bad_gateway",{"_index":727,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["httpstatus.bad_request",{"_index":695,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["id",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"classes/UpdateSessionDto.html":{}}}],["identifier",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["idx_roles_name",{"_index":602,"title":{},"body":{"injectables/TablesService.html":{}}}],["idx_tg_users_login",{"_index":628,"title":{},"body":{"injectables/TablesService.html":{}}}],["idx_users_name",{"_index":615,"title":{},"body":{"injectables/TablesService.html":{}}}],["idx_users_role",{"_index":616,"title":{},"body":{"injectables/TablesService.html":{}}}],["image",{"_index":314,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["implements",{"_index":71,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/PgService.html":{},"injectables/RedisService.html":{},"guards/SessionGuard.html":{},"injectables/TablesService.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":138,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RedisService.html":{},"injectables/RolesService.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RedisService.html":{},"injectables/RolesService.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":144,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RedisService.html":{},"injectables/RolesService.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["insertdefaultroles",{"_index":611,"title":{},"body":{"injectables/TablesService.html":{}}}],["insertquery",{"_index":806,"title":{},"body":{"injectables/UsersService.html":{}}}],["installcompile",{"_index":871,"title":{},"body":{"index.html":{}}}],["interact",{"_index":907,"title":{},"body":{"index.html":{}}}],["ioadapter",{"_index":377,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["ispasswordcorrect",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["job",{"_index":922,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":924,"title":{},"body":{"index.html":{}}}],["join",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["json",{"_index":598,"title":{},"body":{"injectables/TablesService.html":{}}}],["json.parse(tokeninredis",{"_index":92,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["json.stringify(body.access",{"_index":486,"title":{},"body":{"injectables/RolesService.html":{}}}],["json.stringify(payload",{"_index":104,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["jsonb",{"_index":597,"title":{},"body":{"injectables/TablesService.html":{}}}],["jwtmodule",{"_index":136,"title":{},"body":{"modules/AdminModule.html":{}}}],["jwtmodule.register",{"_index":139,"title":{},"body":{"modules/AdminModule.html":{}}}],["jwtservice",{"_index":54,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":939,"title":{},"body":{"index.html":{}}}],["key",{"_index":167,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{}}}],["learn",{"_index":891,"title":{},"body":{"index.html":{}}}],["left",{"_index":491,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":124,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":945,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":927,"title":{},"body":{"index.html":{}}}],["limit",{"_index":495,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":920,"title":{},"body":{"index.html":{}}}],["literal",{"_index":290,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["login",{"_index":160,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":234,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["looking",{"_index":921,"title":{},"body":{"index.html":{}}}],["loop",{"_index":917,"title":{},"body":{"index.html":{}}}],["make",{"_index":412,"title":{},"body":{"modules/RedisModule.html":{}}}],["matching",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["messagebody",{"_index":524,"title":{},"body":{"classes/SessionGateway.html":{}}}],["messenger",{"_index":955,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":847,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":926,"title":{},"body":{"index.html":{}}}],["mode",{"_index":875,"title":{},"body":{"index.html":{}}}],["module",{"_index":120,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":122,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":892,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":940,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":911,"title":{},"body":{"index.html":{}}}],["nest",{"_index":864,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":944,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":889,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":69,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":735,"title":{},"body":{"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":389,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":525,"title":{},"body":{"classes/SessionGateway.html":{},"dependencies.html":{}}}],["new",{"_index":82,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RolesService.html":{},"injectables/SessionService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newsession",{"_index":723,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["node.js",{"_index":857,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":607,"title":{},"body":{"injectables/TablesService.html":{}}}],["npm",{"_index":870,"title":{},"body":{"index.html":{}}}],["null",{"_index":66,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/TablesService.html":{}}}],["number",{"_index":385,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateSessionDto.html":{},"injectables/UsersService.html":{}}}],["number'})@apibody({description",{"_index":651,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["object",{"_index":661,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["observable",{"_index":546,"title":{},"body":{"guards/SessionGuard.html":{}}}],["offer",{"_index":923,"title":{},"body":{"index.html":{}}}],["official",{"_index":902,"title":{},"body":{"index.html":{}}}],["offset",{"_index":496,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["omittype",{"_index":740,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["omittype(createuserdto",{"_index":739,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["onmoduledestroy",{"_index":340,"title":{},"body":{"injectables/PgService.html":{},"injectables/RedisService.html":{}}}],["onmoduleinit",{"_index":341,"title":{},"body":{"injectables/PgService.html":{},"injectables/RedisService.html":{},"injectables/TablesService.html":{}}}],["open",{"_index":928,"title":{},"body":{"index.html":{}}}],["operation",{"_index":713,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["operator",{"_index":645,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["optional",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":386,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["order",{"_index":801,"title":{},"body":{"injectables/UsersService.html":{}}}],["other/pg.modul",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":133,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":949,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":830,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":450,"title":{},"body":{"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["param('login",{"_index":665,"title":{},"body":{"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["param('skip",{"_index":463,"title":{},"body":{"controllers/RolesController.html":{}}}],["parameterized",{"_index":703,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":347,"title":{},"body":{"injectables/PgService.html":{}}}],["part",{"_index":913,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":731,"title":{},"body":{"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["partialtype(createroledto",{"_index":730,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createsessiondto",{"_index":733,"title":{},"body":{"classes/UpdateSessionDto.html":{}}}],["password",{"_index":161,"title":{},"body":{"injectables/AdminService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/PgService.html":{},"injectables/TablesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":449,"title":{},"body":{"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["patch('one/:id",{"_index":447,"title":{},"body":{"controllers/RolesController.html":{}}}],["patch('refresh",{"_index":675,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["patch('update",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":91,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["payload.access",{"_index":98,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["payload.login",{"_index":94,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["payload.role",{"_index":96,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["pg",{"_index":354,"title":{},"body":{"injectables/PgService.html":{},"dependencies.html":{}}}],["pg.service",{"_index":337,"title":{},"body":{"modules/PgModule.html":{}}}],["pgmodule",{"_index":206,"title":{"modules/PgModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PgModule.html":{},"modules.html":{},"overview.html":{}}}],["pgservice",{"_index":147,"title":{"injectables/PgService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["phone",{"_index":637,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["phone_code_invalid",{"_index":670,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["phone_code_invalid'})@patch('refresh",{"_index":639,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["phone_code_invalid'})@post('verify/:login",{"_index":653,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["phone_number_invalid",{"_index":663,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["phone_number_invalid'})@post('register/:login",{"_index":648,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["phonecode",{"_index":668,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["phonecodehash",{"_index":623,"title":{},"body":{"injectables/TablesService.html":{},"injectables/TgAuthService.html":{}}}],["phonenumber",{"_index":621,"title":{},"body":{"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["please",{"_index":895,"title":{},"body":{"index.html":{}}}],["port",{"_index":358,"title":{},"body":{"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{}}}],["post",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":430,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register/:login",{"_index":664,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["post('verify/:login",{"_index":671,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["postgresql",{"_index":360,"title":{},"body":{"injectables/PgService.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["primary",{"_index":166,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{}}}],["private",{"_index":50,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{}}}],["process.env.api_hash",{"_index":700,"title":{},"body":{"injectables/TgAuthService.html":{},"miscellaneous/functions.html":{}}}],["process.env.api_id",{"_index":698,"title":{},"body":{"injectables/TgAuthService.html":{},"miscellaneous/functions.html":{}}}],["process.env.bcrypt_salt",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["process.env.db_host",{"_index":357,"title":{},"body":{"injectables/PgService.html":{},"injectables/SessionService.html":{}}}],["process.env.db_name",{"_index":364,"title":{},"body":{"injectables/PgService.html":{}}}],["process.env.db_password",{"_index":362,"title":{},"body":{"injectables/PgService.html":{}}}],["process.env.db_port",{"_index":359,"title":{},"body":{"injectables/PgService.html":{}}}],["process.env.db_user",{"_index":361,"title":{},"body":{"injectables/PgService.html":{}}}],["process.env.jwt_expires_in",{"_index":143,"title":{},"body":{"modules/AdminModule.html":{}}}],["process.env.jwt_secret",{"_index":102,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"guards/AuthGuard.html":{}}}],["process.env.test_servers",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":877,"title":{},"body":{"index.html":{}}}],["profile/:login",{"_index":762,"title":{},"body":{"controllers/UsersController.html":{}}}],["progressive",{"_index":856,"title":{},"body":{"index.html":{}}}],["project",{"_index":868,"title":{},"body":{"index.html":{}}}],["promise",{"_index":61,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"guards/SessionGuard.html":{}}}],["promise.all([pubclient.connect",{"_index":401,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["properties",{"_index":281,"title":{"properties.html":{}},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/TgAuthController.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserPasswordDto.html":{},"properties.html":{}}}],["providers",{"_index":127,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["pubclient",{"_index":396,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["pubclient.duplicate",{"_index":400,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["query",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["query(query",{"_index":346,"title":{},"body":{"injectables/PgService.html":{}}}],["query_create_table",{"_index":595,"title":{},"body":{"injectables/TablesService.html":{}}}],["query_find_user",{"_index":692,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["query_insert_roles",{"_index":604,"title":{},"body":{"injectables/TablesService.html":{}}}],["query_insert_users",{"_index":617,"title":{},"body":{"injectables/TablesService.html":{}}}],["questions",{"_index":893,"title":{},"body":{"index.html":{}}}],["r",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["r.id",{"_index":492,"title":{},"body":{"injectables/RolesService.html":{}}}],["r.name",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["read",{"_index":935,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":908,"title":{},"body":{"index.html":{}}}],["redis",{"_index":395,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":411,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["redis/redis.service",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["redis://localhost:6379",{"_index":398,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{}}}],["redisclient",{"_index":85,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["redisclient.get(token",{"_index":90,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["redisclient.set(token",{"_index":103,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["redisclienttype",{"_index":417,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisioadapter",{"_index":374,"title":{"classes/RedisIoAdapter.html":{}},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["redismodule",{"_index":207,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":55,"title":{"injectables/RedisService.html":{}},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"modules/RolesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["references",{"_index":613,"title":{},"body":{"injectables/TablesService.html":{}}}],["reflect",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":636,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["refreshcode",{"_index":632,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["refreshcode(@param('login",{"_index":676,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["refreshcode(login",{"_index":635,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["register",{"_index":633,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["register(login",{"_index":642,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["remove",{"_index":427,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["remove(@messagebody",{"_index":542,"title":{},"body":{"classes/SessionGateway.html":{}}}],["remove(@param('id",{"_index":469,"title":{},"body":{"controllers/RolesController.html":{}}}],["remove(id",{"_index":442,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["removes",{"_index":569,"title":{},"body":{"injectables/SessionService.html":{}}}],["repository",{"_index":867,"title":{},"body":{"index.html":{}}}],["req",{"_index":151,"title":{},"body":{"injectables/AdminService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["req.access",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["req.login",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{},"injectables/UsersService.html":{}}}],["req.name",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["req.password",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{}}}],["request",{"_index":78,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"controllers/UsersController.html":{}}}],["request.access",{"_index":97,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["request.login",{"_index":93,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["request.role",{"_index":95,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["required",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["reset",{"_index":132,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":885,"title":{},"body":{"index.html":{}}}],["result",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["result.rowcount",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["result.rows",{"_index":494,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["result.rows[0",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returning",{"_index":488,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returntype",{"_index":381,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["role",{"_index":163,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/TablesService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["role.dto",{"_index":454,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":288,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:13",{"_index":294,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:32",{"_index":293,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:8",{"_index":295,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["roles",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{}}}],["roles\"(\"name",{"_index":614,"title":{},"body":{"injectables/TablesService.html":{}}}],["roles.controller",{"_index":475,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.service",{"_index":453,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/roles.module",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["rolescontroller",{"_index":422,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":208,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesservice",{"_index":452,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":590,"title":{},"body":{"injectables/TablesService.html":{},"index.html":{}}}],["running",{"_index":229,"title":{},"body":{"injectables/AppService.html":{}}}],["rxjs",{"_index":547,"title":{},"body":{"guards/SessionGuard.html":{},"dependencies.html":{}}}],["safely",{"_index":704,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["safequery",{"_index":342,"title":{},"body":{"injectables/PgService.html":{}}}],["safequery(query",{"_index":350,"title":{},"body":{"injectables/PgService.html":{}}}],["scalable",{"_index":861,"title":{},"body":{"index.html":{}}}],["schema",{"_index":646,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["secret",{"_index":101,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"guards/AuthGuard.html":{}}}],["select",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":644,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["serial",{"_index":596,"title":{},"body":{"injectables/TablesService.html":{}}}],["server",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/RedisIoAdapter.html":{},"index.html":{}}}],["server'})@get",{"_index":192,"title":{},"body":{"controllers/AppController.html":{}}}],["server.adapter(this.adapterconstructor",{"_index":406,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["serveroptions",{"_index":387,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["session",{"_index":498,"title":{"classes/Session.html":{}},"body":{"classes/Session.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["session.dto",{"_index":527,"title":{},"body":{"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"classes/UpdateSessionDto.html":{}}}],["session.dto.ts",{"_index":318,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["session.dto.ts:5",{"_index":734,"title":{},"body":{"classes/UpdateSessionDto.html":{}}}],["session.gateway",{"_index":559,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.service",{"_index":526,"title":{},"body":{"classes/SessionGateway.html":{},"modules/SessionModule.html":{}}}],["session/session.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["sessiongateway",{"_index":500,"title":{"classes/SessionGateway.html":{}},"body":{"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionguard",{"_index":529,"title":{"guards/SessionGuard.html":{}},"body":{"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"coverage.html":{}}}],["sessionmodule",{"_index":209,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionservice",{"_index":504,"title":{"injectables/SessionService.html":{}},"body":{"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{}}}],["sessuon.guard",{"_index":530,"title":{},"body":{"classes/SessionGateway.html":{}}}],["set",{"_index":497,"title":{},"body":{"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":869,"title":{},"body":{"index.html":{}}}],["side",{"_index":862,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":141,"title":{},"body":{"modules/AdminModule.html":{}}}],["skip",{"_index":438,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["socket",{"_index":548,"title":{},"body":{"guards/SessionGuard.html":{}}}],["socket.io",{"_index":390,"title":{},"body":{"classes/RedisIoAdapter.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["socket.io/redis",{"_index":392,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"modules/PgModule.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/Session.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/TablesModule.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["split",{"_index":74,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["sponsors",{"_index":931,"title":{},"body":{"index.html":{}}}],["sql",{"_index":368,"title":{},"body":{"injectables/PgService.html":{}}}],["src/.../auth.decorator.ts",{"_index":849,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":850,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../telegramclient.ts",{"_index":851,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/admin/admin.controller.ts",{"_index":6,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:12",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.guad.ts",{"_index":47,"title":{},"body":{"guards/AdminGuard.html":{},"coverage.html":{}}}],["src/admin/admin.guad.ts:11",{"_index":56,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/admin/admin.guad.ts:17",{"_index":64,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/admin/admin.guad.ts:27",{"_index":59,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/admin/admin.module.ts",{"_index":134,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":145,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:14",{"_index":150,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:8",{"_index":148,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/dto/create",{"_index":279,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":188,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":193,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":227,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":228,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:12",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.decorator",{"_index":456,"title":{},"body":{"controllers/RolesController.html":{},"controllers/TgAuthController.html":{},"controllers/UsersController.html":{}}}],["src/auth/auth.decorator.ts",{"_index":818,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/auth.guard.ts",{"_index":245,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:11",{"_index":246,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:17",{"_index":248,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:27",{"_index":247,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":329,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":821,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/other/pg.modul.ts",{"_index":336,"title":{},"body":{"modules/PgModule.html":{}}}],["src/other/pg.service",{"_index":154,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["src/other/pg.service.ts",{"_index":338,"title":{},"body":{"injectables/PgService.html":{},"coverage.html":{}}}],["src/other/pg.service.ts:19",{"_index":345,"title":{},"body":{"injectables/PgService.html":{}}}],["src/other/pg.service.ts:23",{"_index":344,"title":{},"body":{"injectables/PgService.html":{}}}],["src/other/pg.service.ts:27",{"_index":348,"title":{},"body":{"injectables/PgService.html":{}}}],["src/other/pg.service.ts:31",{"_index":352,"title":{},"body":{"injectables/PgService.html":{}}}],["src/other/pg.service.ts:7",{"_index":343,"title":{},"body":{"injectables/PgService.html":{}}}],["src/other/redis.ts",{"_index":375,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["src/other/redis.ts:18",{"_index":388,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/other/redis.ts:7",{"_index":382,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/other/redis.ts:9",{"_index":383,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/other/telegramclient",{"_index":689,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["src/other/telegramclient.ts",{"_index":823,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/redis/redis.module",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{}}}],["src/redis/redis.module.ts",{"_index":410,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service",{"_index":70,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["src/redis/redis.service.ts",{"_index":414,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:13",{"_index":418,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:17",{"_index":416,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":420,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:8",{"_index":419,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/roles/dto/create",{"_index":287,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/roles/dto/update",{"_index":729,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts",{"_index":423,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:23",{"_index":431,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:31",{"_index":433,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:36",{"_index":440,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:41",{"_index":436,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:46",{"_index":448,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:51",{"_index":444,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":474,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":476,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:21",{"_index":479,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:41",{"_index":481,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:62",{"_index":480,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:7",{"_index":477,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:76",{"_index":483,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:9",{"_index":478,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:92",{"_index":482,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/session/dto/create",{"_index":317,"title":{},"body":{"classes/CreateSessionDto.html":{},"coverage.html":{}}}],["src/session/dto/update",{"_index":732,"title":{},"body":{"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["src/session/entities/session.entity.ts",{"_index":499,"title":{},"body":{"classes/Session.html":{},"coverage.html":{}}}],["src/session/session.gateway.ts",{"_index":501,"title":{},"body":{"classes/SessionGateway.html":{},"coverage.html":{}}}],["src/session/session.gateway.ts:13",{"_index":505,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.gateway.ts:19",{"_index":514,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.gateway.ts:23",{"_index":508,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.gateway.ts:28",{"_index":510,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.gateway.ts:33",{"_index":512,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.gateway.ts:38",{"_index":521,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.gateway.ts:43",{"_index":517,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/session/session.module.ts",{"_index":558,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":560,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:11",{"_index":562,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:15",{"_index":563,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":565,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":564,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:7",{"_index":561,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/sessuon.guard.ts",{"_index":544,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/session/sessuon.guard.ts:7",{"_index":545,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/tables/tables.module.ts",{"_index":573,"title":{},"body":{"modules/TablesModule.html":{}}}],["src/tables/tables.service.ts",{"_index":575,"title":{},"body":{"injectables/TablesService.html":{},"coverage.html":{}}}],["src/tables/tables.service.ts:109",{"_index":583,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tables/tables.service.ts:120",{"_index":585,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tables/tables.service.ts:17",{"_index":584,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tables/tables.service.ts:34",{"_index":582,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tables/tables.service.ts:5",{"_index":581,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tables/tables.service.ts:8",{"_index":587,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tables/tables.service.ts:90",{"_index":586,"title":{},"body":{"injectables/TablesService.html":{}}}],["src/tg",{"_index":630,"title":{},"body":{"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":738,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:22",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":756,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":759,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:48",{"_index":763,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":779,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":781,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":785,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":788,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":784,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":786,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:83",{"_index":790,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":783,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":791,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":873,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":876,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":878,"title":{},"body":{"index.html":{}}}],["started",{"_index":855,"title":{"index.html":{}},"body":{}}],["starter",{"_index":866,"title":{},"body":{"index.html":{}}}],["statements",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":916,"title":{},"body":{"index.html":{}}}],["string",{"_index":63,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/PgService.html":{},"controllers/RolesController.html":{},"injectables/SessionService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["subclient",{"_index":399,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["subclient.connect",{"_index":402,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["subscribemessage",{"_index":523,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('connection",{"_index":533,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('createsession",{"_index":507,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('findallsession",{"_index":509,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('findonesession",{"_index":511,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('removesession",{"_index":516,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('updatesession",{"_index":520,"title":{},"body":{"classes/SessionGateway.html":{}}}],["summary",{"_index":198,"title":{},"body":{"controllers/AppController.html":{},"controllers/TgAuthController.html":{}}}],["super.createioserver(port",{"_index":405,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["support",{"_index":894,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":947,"title":{},"body":{"modules.html":{}}}],["t",{"_index":799,"title":{},"body":{"injectables/UsersService.html":{}}}],["t.\"login",{"_index":800,"title":{},"body":{"injectables/UsersService.html":{}}}],["t.\"phonenumber",{"_index":797,"title":{},"body":{"injectables/UsersService.html":{}}}],["t.\"verified",{"_index":798,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":156,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"coverage.html":{}}}],["tables.service",{"_index":574,"title":{},"body":{"modules/TablesModule.html":{}}}],["tables/tables.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["tablesmodule",{"_index":210,"title":{"modules/TablesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TablesModule.html":{},"modules.html":{},"overview.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["tablesservice",{"_index":572,"title":{"injectables/TablesService.html":{}},"body":{"modules/TablesModule.html":{},"injectables/TablesService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":441,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["telegram",{"_index":660,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"dependencies.html":{}}}],["telegram'})@apibody({description",{"_index":643,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["telegramclient",{"_index":688,"title":{},"body":{"injectables/TgAuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["telegramclient(session",{"_index":853,"title":{},"body":{"miscellaneous/functions.html":{}}}],["telegramclient(user.rows[0].session",{"_index":718,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["test",{"_index":191,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["test(check",{"_index":372,"title":{},"body":{"injectables/PgService.html":{}}}],["test:covresources",{"_index":883,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":882,"title":{},"body":{"index.html":{}}}],["test_servers",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tests",{"_index":879,"title":{},"body":{"index.html":{}}}],["testserver",{"_index":189,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["tg",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{}}}],["tgauthcontroller",{"_index":629,"title":{"controllers/TgAuthController.html":{}},"body":{"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"coverage.html":{}}}],["tgauthmodule",{"_index":211,"title":{"modules/TgAuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TgAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["tgauthservice",{"_index":655,"title":{"injectables/TgAuthService.html":{}},"body":{"controllers/TgAuthController.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["tgusers",{"_index":620,"title":{},"body":{"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["thanks",{"_index":930,"title":{},"body":{"index.html":{}}}],["this.adapterconstructor",{"_index":403,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.adminservice.create(createadmindto",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.appservice.testserver",{"_index":200,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(body",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.client",{"_index":355,"title":{},"body":{"injectables/PgService.html":{},"injectables/RedisService.html":{}}}],["this.client.connect",{"_index":365,"title":{},"body":{"injectables/PgService.html":{},"injectables/RedisService.html":{}}}],["this.client.end",{"_index":366,"title":{},"body":{"injectables/PgService.html":{}}}],["this.client.query(query",{"_index":367,"title":{},"body":{"injectables/PgService.html":{}}}],["this.client.quit",{"_index":421,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.createdefaultroles",{"_index":589,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.createdefaultusers",{"_index":593,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.createroles",{"_index":588,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.createtgusers",{"_index":594,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.createusers",{"_index":592,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.extracttokenfromcookies(request.headers.cookie",{"_index":80,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["this.jwtservice.signasync(payload",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":100,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["this.pgservice.query",{"_index":724,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["this.pgservice.query(insertquery",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.pgservice.query(query",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["this.pgservice.query(query_find_user",{"_index":693,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["this.pgservice.query(query_insert_users",{"_index":619,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.pgservice.safequery(query_create_table",{"_index":603,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.pgservice.safequery(query_insert_roles",{"_index":610,"title":{},"body":{"injectables/TablesService.html":{}}}],["this.redisservice.getclient",{"_index":86,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["this.rolesservice.create(body",{"_index":460,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findall",{"_index":461,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":466,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findsome(+take",{"_index":464,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.remove(+id",{"_index":470,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.update(+id",{"_index":468,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.sessionservice.create(createsessiondto",{"_index":536,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionservice.findall",{"_index":537,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionservice.findone(id",{"_index":539,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionservice.remove(id",{"_index":543,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionservice.update(updatesessiondto.id",{"_index":541,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.tgauthservice.refreshcode(login",{"_index":677,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["this.tgauthservice.register(login",{"_index":666,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["this.tgauthservice.verify(login",{"_index":673,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["this.usersservice.create(body",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getall",{"_index":768,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getprofile(req",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatepassword(req.login",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateprofile(login",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":81,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PgService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":113,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"index.html":{}}}],["timestamp",{"_index":600,"title":{},"body":{"injectables/TablesService.html":{}}}],["token",{"_index":73,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["token.split('=')[1",{"_index":77,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["tokeninredis",{"_index":88,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["touch",{"_index":937,"title":{},"body":{"index.html":{}}}],["true",{"_index":99,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminModule.html":{},"guards/AuthGuard.html":{},"classes/CreateRoleDto.html":{},"guards/SessionGuard.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":87,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/TgAuthService.html":{}}}],["twitter",{"_index":943,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"guards/AdminGuard.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/TablesService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["types",{"_index":736,"title":{},"body":{"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":865,"title":{},"body":{"index.html":{}}}],["u",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["u.\"created_at",{"_index":796,"title":{},"body":{"injectables/UsersService.html":{}}}],["u.\"login",{"_index":793,"title":{},"body":{"injectables/UsersService.html":{}}}],["u.\"name",{"_index":794,"title":{},"body":{"injectables/UsersService.html":{}}}],["u.\"role",{"_index":795,"title":{},"body":{"injectables/UsersService.html":{}}}],["u.login",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["u.role",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["unauthorizedexception",{"_index":68,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["unauthorizedexception('token",{"_index":83,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["undefined",{"_index":292,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":647,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["unique",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{}}}],["unit",{"_index":880,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":152,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["update",{"_index":428,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["update(@messagebody",{"_index":540,"title":{},"body":{"classes/SessionGateway.html":{}}}],["update(@param('id",{"_index":467,"title":{},"body":{"controllers/RolesController.html":{}}}],["update(id",{"_index":445,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SessionService.html":{}}}],["update(updatesessiondto",{"_index":518,"title":{},"body":{"classes/SessionGateway.html":{}}}],["updatepassword",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatepassword(body",{"_index":757,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepassword(login",{"_index":789,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofile",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile(login",{"_index":760,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateroledto",{"_index":446,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updates",{"_index":568,"title":{},"body":{"injectables/SessionService.html":{},"index.html":{}}}],["updatesessiondto",{"_index":519,"title":{"classes/UpdateSessionDto.html":{}},"body":{"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":737,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserpassworddto",{"_index":742,"title":{"classes/UpdateUserPasswordDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["url",{"_index":397,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RedisService.html":{}}}],["use",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/TgAuthModule.html":{},"injectables/TgAuthService.html":{},"modules/UsersModule.html":{}}}],["useguards",{"_index":528,"title":{},"body":{"classes/SessionGateway.html":{}}}],["useguards(sessionguard",{"_index":532,"title":{},"body":{"classes/SessionGateway.html":{}}}],["useguards(sessionguard)@subscribemessage('connection",{"_index":513,"title":{},"body":{"classes/SessionGateway.html":{}}}],["user",{"_index":157,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDto.html":{},"injectables/PgService.html":{},"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{}}}],["user.access",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":741,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":743,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["user.dto.ts:13",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.rowcount",{"_index":694,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["user.rows[0",{"_index":717,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["user.rows[0].phonecodehash",{"_index":722,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["user.rows[0].phonenumber",{"_index":721,"title":{},"body":{"injectables/TgAuthService.html":{}}}],["users",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users\"(\"login",{"_index":626,"title":{},"body":{"injectables/TablesService.html":{}}}],["users.controller",{"_index":780,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":765,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["users_count",{"_index":490,"title":{},"body":{"injectables/RolesService.html":{}}}],["userscontroller",{"_index":744,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":212,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":764,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":909,"title":{},"body":{"index.html":{}}}],["validate",{"_index":554,"title":{},"body":{"guards/SessionGuard.html":{}}}],["value",{"_index":353,"title":{},"body":{"injectables/PgService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":484,"title":{},"body":{"injectables/RolesService.html":{},"injectables/TablesService.html":{},"injectables/TgAuthService.html":{},"injectables/UsersService.html":{}}}],["varchar(20",{"_index":622,"title":{},"body":{"injectables/TablesService.html":{}}}],["varchar(255",{"_index":159,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{}}}],["varchar(511",{"_index":624,"title":{},"body":{"injectables/TablesService.html":{}}}],["varchar(60",{"_index":162,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TablesService.html":{}}}],["variable",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":959,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":118,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["verified",{"_index":625,"title":{},"body":{"injectables/TablesService.html":{},"injectables/TgAuthService.html":{}}}],["verify",{"_index":634,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["verify(@param('login",{"_index":672,"title":{},"body":{"controllers/TgAuthController.html":{}}}],["verify(login",{"_index":650,"title":{},"body":{"controllers/TgAuthController.html":{},"injectables/TgAuthService.html":{}}}],["verifying",{"_index":117,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["version",{"_index":952,"title":{},"body":{"properties.html":{}}}],["video",{"_index":313,"title":{},"body":{"classes/CreateRoleDto.html":{},"index.html":{}}}],["visit",{"_index":890,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":904,"title":{},"body":{"index.html":{}}}],["void",{"_index":515,"title":{},"body":{"classes/SessionGateway.html":{}}}],["watch",{"_index":874,"title":{},"body":{"index.html":{}}}],["website",{"_index":941,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":522,"title":{},"body":{"classes/SessionGateway.html":{}}}],["working",{"_index":888,"title":{},"body":{"index.html":{}}}],["x",{"_index":919,"title":{},"body":{"index.html":{}}}],["yes",{"_index":349,"title":{},"body":{"injectables/PgService.html":{},"classes/RedisIoAdapter.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":934,"title":{},"body":{"index.html":{}}}],["z0",{"_index":370,"title":{},"body":{"injectables/PgService.html":{}}}],["za",{"_index":369,"title":{},"body":{"injectables/PgService.html":{}}}],["zoom",{"_index":131,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PgModule.html":{},"modules/RedisModule.html":{},"modules/RolesModule.html":{},"modules/SessionModule.html":{},"modules/TablesModule.html":{},"modules/TgAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAdminDto: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Admin')\n@Controller('admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Post()\n  create(@Body() createAdminDto: CreateAdminDto) {\n    return this.adminService.create(createAdminDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AdminGuard.html":{"url":"guards/AdminGuard.html","title":"guard - AdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/admin/admin.guad.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromCookies\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.guad.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.guad.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromCookies\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromCookies(cookies: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.guad.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cookies\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { RedisService } from 'src/redis/redis.service';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly redisService: RedisService,\n  ) {}\n\n  private extractTokenFromCookies(cookies: string): string | null {\n    if (!cookies) {\n      return null;\n    }\n    const token = cookies\n      .split('; ')\n      .find((cookie) => cookie.startsWith('token='));\n    return token ? token.split('=')[1] : null;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromCookies(request.headers.cookie);\n\n    if (!token) {\n      throw new UnauthorizedException('Token not found');\n    }\n    const redisClient = this.redisService.getClient();\n\n    try {\n      const tokenInRedis = await redisClient.get(token);\n      if (tokenInRedis) {\n        const payload = JSON.parse(tokenInRedis);\n        request.login = payload.login;\n        request.role = payload.role;\n        if (payload.role !== 'Админ') {\n          throw new UnauthorizedException();\n        }\n        request.access = payload.access;\n        return true;\n      }\n\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n      });\n      redisClient.set(token, JSON.stringify(payload), {\n        EX: 60 * 60 * 24, // 1 day\n      }); // Consider adding an expiration time\n      request.login = payload.login;\n      request.role = payload.role;\n      request.access = payload.access;\n      if (payload.role !== 'Админ') {\n        throw new UnauthorizedException();\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      throw new UnauthorizedException('Token verification failed');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport 'dotenv/config';\n@Module({\n  imports: [\n    JwtModule.register({\n      global: true,\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: process.env.JWT_EXPIRES_IN },\n    }),\n  ],\n  controllers: [AdminController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pgService: PgService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pgService\n                                                  \n                                                        \n                                                                        PgService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: CreateAdminDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { PgService } from 'src/other/pg.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n    private readonly pgService: PgService,\n    private jwtService: JwtService,\n  ) {}\n\n  async create(req: CreateAdminDto) {\n    // create table user if not exists name varchar(255), login varchar(255), password varchar(60) , role enum('admin', 'user') default 'user' , primary key (login) , unique (login);\n\n    const hashed_password = await bcrypt.hash(\n      req.password,\n      +process.env.BCRYPT_SALT,\n    );\n    const query = `\n      INSERT INTO \"Users\" (\"name\", \"login\", \"password\", \"role\")\n      SELECT '${req.name}', '${req.login}', '${hashed_password}', 'admin'\n      WHERE NOT EXISTS (\n          SELECT 1 FROM \"Users\" WHERE \"login\" = '${req.login}'\n      );\n    `;\n\n    const result = await this.pgService.query(query);\n    if (!result.rowCount) {\n      throw new HttpException(\n        'Пользователь с таким логином уже существует 🤷‍♂️',\n        400,\n      );\n    } else {\n      //generate token\n      const payload = { login: req.login, role: 'admin' };\n      const access_token = await this.jwtService.signAsync(payload);\n      return {\n        message: 'Пользователь успешно создан 👍',\n        token: access_token,\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                testServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        testServer\n                        \n                    \n                \n            \n            \n                \n                        \n                    testServer()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Test server'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n  @ApiOperation({ summary: 'Test server' })\n  @Get()\n  testServer(): string {\n    return this.appService.testServer();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPgModule\n\nPgModule\n\nAppModule -->\n\nPgModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nTablesModule\n\nTablesModule\n\nAppModule -->\n\nTablesModule->AppModule\n\n\n\n\n\nTgAuthModule\n\nTgAuthModule\n\nAppModule -->\n\nTgAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            PgModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            TablesModule\n                        \n                        \n                            TgAuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { SessionModule } from './session/session.module';\nimport { UsersModule } from './users/users.module';\nimport { AdminModule } from './admin/admin.module';\nimport { PgModule } from './other/pg.modul';\nimport { TgAuthModule } from './tg-auth/tg-auth.module';\nimport { RolesModule } from './roles/roles.module';\nimport { TablesModule } from './tables/tables.module';\nimport { RedisModule } from './redis/redis.module';\nimport { RedisService } from './redis/redis.service';\n@Module({\n  imports: [\n    PgModule,\n    AuthModule,\n    SessionModule,\n    UsersModule,\n    AdminModule,\n    TgAuthModule,\n    RolesModule,\n    TablesModule,\n    RedisModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                testServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        testServer\n                        \n                    \n                \n            \n            \n                \ntestServer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  testServer(): string {\n    return 'Server is running!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: LoginAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            LoginAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginAuthDto } from './dto/create-auth.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Authentification')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() body: LoginAuthDto) {\n    return this.authService.login(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromCookies\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromCookies\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromCookies(cookies: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cookies\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { RedisService } from 'src/redis/redis.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly redisService: RedisService,\n  ) {}\n\n  private extractTokenFromCookies(cookies: string): string | null {\n    if (!cookies) {\n      return null;\n    }\n    const token = cookies\n      .split('; ')\n      .find((cookie) => cookie.startsWith('token='));\n    return token ? token.split('=')[1] : null;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromCookies(request.headers.cookie);\n\n    if (!token) {\n      throw new UnauthorizedException('Token not found');\n    }\n    const redisClient = this.redisService.getClient();\n\n    try {\n      const tokenInRedis = await redisClient.get(token);\n      if (tokenInRedis) {\n        const payload = JSON.parse(tokenInRedis);\n        request.login = payload.login;\n        request.role = payload.role;\n        request.access = payload.access;\n        return true;\n      }\n\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n      });\n      redisClient.set(token, JSON.stringify(payload), {\n        EX: 60 * 60 * 24, // 1 day\n      }); // Consider adding an expiration time\n      request.login = payload.login;\n      request.role = payload.role;\n      request.access = payload.access;\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      throw new UnauthorizedException('Token verification failed');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { RedisModule } from 'src/redis/redis.module';\n\n@Module({\n  imports: [RedisModule], // Import RedisModule to use RedisService\n\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pgService: PgService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pgService\n                                                  \n                                                        \n                                                                        PgService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: LoginAuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            LoginAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { LoginAuthDto } from './dto/create-auth.dto';\nimport { PgService } from 'src/other/pg.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly pgService: PgService,\n    private jwtService: JwtService,\n  ) {}\n  async login(body: LoginAuthDto) {\n    const query = `\n  SELECT u.*, r.* \n  FROM \"Users\" u\n  JOIN \"Roles\" r ON u.role = r.name\n  WHERE u.login = '${body.login}';\n`;\n    const result = await this.pgService.query(query);\n\n    if (!result.rowCount) {\n      throw new HttpException('Пользователь не найден 👀', 404);\n    }\n    const user = result.rows[0];\n    const isPasswordCorrect = await bcrypt.compare(\n      body.password,\n      user.password,\n    );\n    if (!isPasswordCorrect) {\n      throw new HttpException('Неверный пароль 🚫', 400);\n    }\n    const payload = { login: body.login, role: user.role, access: user.access };\n    const token = await this.jwtService.signAsync(payload);\n    return {\n      message: 'Вход выполнен успешно 👍',\n      id: user.id,\n      token,\n      role: user.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateAdminDto {\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  login: string;\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'Права доступа'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Роль для менеджера', description: 'Описание роли'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Менеджер', description: 'Название роли'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n  @ApiProperty({\n    example: 'Менеджер',\n    description: 'Название роли',\n  })\n  name: string;\n  @ApiProperty({\n    example: 'Роль для менеджера',\n    description: 'Описание роли',\n  })\n  description?: string;\n  @ApiProperty({\n    example: {\n      can_manage_user: true,\n      can_write: true,\n      can_read: true,\n      can_delete: true,\n      can_send_audio: true,\n      can_read_audio: true,\n      can_send_video: true,\n      can_read_video: true,\n      can_send_photo: true,\n      can_read_photo: true,\n      can_send_file: true,\n      can_read_file: true,\n      can_create_group: true,\n    },\n    description: 'Права доступа',\n  })\n  access: {\n    //  User\n    can_manage_user: boolean;\n    //  Chat\n    can_write: boolean;\n    can_read: boolean;\n    can_delete: boolean;\n    //  Audio\n    can_send_audio: boolean;\n    can_read_audio: boolean;\n    //  Video\n    can_send_video: boolean;\n    can_read_video: boolean;\n    //  Image\n    can_send_photo: boolean;\n    can_read_photo: boolean;\n    //  File\n    can_send_file: boolean;\n    can_read_file: boolean;\n    // Group\n    can_create_group: boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSessionDto.html":{"url":"classes/CreateSessionDto.html","title":"class - CreateSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/dto/create-session.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSessionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  login: string;\n  @ApiProperty()\n  password: string;\n  @ApiProperty({\n    required: false,\n  })\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-auth.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginAuthDto {\n  @ApiProperty()\n  login: string;\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PgModule.html":{"url":"modules/PgModule.html","title":"module - PgModule","body":"\n                   \n\n\n\n\n    Modules\n    PgModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PgModule\n\n\n\ncluster_PgModule_exports\n\n\n\ncluster_PgModule_providers\n\n\n\n\nPgService \n\nPgService \n\n\n\nPgModule\n\nPgModule\n\nPgService  -->\n\nPgModule->PgService \n\n\n\n\n\nPgService\n\nPgService\n\nPgModule -->\n\nPgService->PgModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/other/pg.modul.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PgService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PgService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PgService } from './pg.service';\n\n@Global() // Делаем модуль глобальным\n@Module({\n  providers: [PgService],\n  exports: [PgService], // Экспортируем PgService для использования в других модулях\n})\nexport class PgModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PgService.html":{"url":"injectables/PgService.html","title":"injectable - PgService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PgService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/other/pg.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                query\n                            \n                            \n                                    Async\n                                safeQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/other/pg.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/other/pg.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/other/pg.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(query: string, params?: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/other/pg.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        safeQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    safeQuery(query: string, check: string, params?: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/other/pg.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                check\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                        \n                                                params\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/other/pg.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { Client } from 'pg';\nimport { HttpException } from '@nestjs/common';\n\n@Injectable()\nexport class PgService implements OnModuleInit, OnModuleDestroy {\n  private client: Client;\n\n  constructor() {\n    this.client = new Client({\n      host: process.env.DB_HOST, // Хост базы данных\n      port: +process.env.DB_PORT, // Порт PostgreSQL\n      user: process.env.DB_USER, // Имя пользователя\n      password: process.env.DB_PASSWORD, // Пароль\n      database: process.env.DB_NAME, // Имя базы данных\n    });\n  }\n\n  async onModuleInit() {\n    await this.client.connect(); // Устанавливаем подключение при запуске модуля\n  }\n\n  async onModuleDestroy() {\n    await this.client.end(); // Закрываем подключение при завершении работы модуля\n  }\n\n  async query(query: string, params?: any[]): Promise {\n    return this.client.query(query, params); // Выполнение SQL-запроса\n  }\n\n  async safeQuery(\n    query: string,\n    check: string = '',\n    params?: any[],\n  ): Promise {\n    // Проверяем, что запрос не содержит опасных символов\n    if (!/^[a-zA-Z0-9_.,()'\" ]+$/.test(check)) {\n      throw new HttpException('Не пытайся взломать 😊', 418);\n    }\n    return this.client.query(query, params); // Выполнение SQL-запроса\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisIoAdapter.html":{"url":"classes/RedisIoAdapter.html","title":"class - RedisIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/other/redis.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                adapterConstructor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectToRedis\n                            \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        adapterConstructor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/other/redis.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        connectToRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    connectToRedis()\n                \n            \n\n\n                    \n                        \n                            Defined in src/other/redis.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: ServerOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/other/redis.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                port\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ServerOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IoAdapter } from '@nestjs/platform-socket.io';\nimport { ServerOptions } from 'socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { createClient } from 'redis';\n\nexport class RedisIoAdapter extends IoAdapter {\n  private adapterConstructor: ReturnType;\n\n  async connectToRedis(): Promise {\n    const pubClient = createClient({ url: `redis://localhost:6379` });\n    const subClient = pubClient.duplicate();\n\n    await Promise.all([pubClient.connect(), subClient.connect()]);\n\n    this.adapterConstructor = createAdapter(pubClient, subClient);\n  }\n\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, options);\n    server.adapter(this.adapterConstructor);\n    return server;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RedisModule_exports\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\n\n@Module({\n  providers: [RedisService],\n  exports: [RedisService], // Export RedisService to make it available to other modules\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     RedisClientType\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RedisClientType\n\n                    \n                \n                    \n                        \n                                Defined in src/redis/redis.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { createClient, RedisClientType } from 'redis';\n\n@Injectable()\nexport class RedisService implements OnModuleInit, OnModuleDestroy {\n  private client: RedisClientType;\n\n  async onModuleInit() {\n    this.client = createClient({ url: 'redis://localhost:6379' });\n    await this.client.connect();\n  }\n\n  async onModuleDestroy() {\n    await this.client.quit();\n  }\n\n  getClient() {\n    return this.client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findSome\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('one/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findSome\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSome(take: string, skip: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('some/:take/:skip')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                take\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('one/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('one/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoleDto\n                                            \n                                                            UpdateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Auth } from 'src/auth/auth.decorator';\n\n@ApiTags('Roles')\n@Auth('admin')\n@Controller('roles')\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Post('create')\n  create(\n    @Body()\n    body: CreateRoleDto,\n  ) {\n    return this.rolesService.create(body);\n  }\n\n  @Get('all')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get('some/:take/:skip')\n  findSome(@Param('take') take: string, @Param('skip') skip: string) {\n    return this.rolesService.findSome(+take, +skip);\n  }\n\n  @Get('one/:id')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Patch('one/:id')\n  update(@Param('id') id: string, @Body() updateRoleDto: UpdateRoleDto) {\n    return this.rolesService.update(+id, updateRoleDto);\n  }\n\n  @Delete('one/:id')\n  remove(@Param('id') id: string) {\n    return this.rolesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_imports\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nRedisModule->RolesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\nimport { RedisModule } from 'src/redis/redis.module';\n\n@Module({\n  imports: [RedisModule], // Import RedisModule to use RedisService\n  controllers: [RolesController],\n  providers: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findSome\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pgService: PgService)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pgService\n                                                  \n                                                        \n                                                                        PgService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSome\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSome(take: number, skip: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, body: UpdateRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { PgService } from 'src/other/pg.service';\n\n@Injectable()\nexport class RolesService {\n  constructor(private readonly pgService: PgService) {}\n  async create(body: CreateRoleDto) {\n    const query = `\n      INSERT INTO \"Roles\" (name, access, description)\n      VALUES ('${body.name}' , '${JSON.stringify(body.access)}', '${body.description}')\n      RETURNING *;\n    `;\n    await this.pgService.query(query);\n    return {\n      message: 'Роль успешно создана',\n    };\n  }\n\n  async findAll() {\n    const query = `\n      SELECT \n        r.*, \n        COUNT(u.login) AS users_count \n      FROM \n        \"Roles\" r \n      LEFT JOIN \n        \"Users\" u ON r.name = u.role \n      GROUP BY \n        r.id;\n    `;\n\n    const result = await this.pgService.query(query);\n    return {\n      message: 'Список ролей с количеством пользователей',\n      data: result.rows,\n    };\n  }\n\n  async findSome(take: number, skip: number) {\n    const query = `\n      SELECT \n        r.*, \n        COUNT(u.login) AS users_count \n      FROM \n        \"Roles\" r \n      LEFT JOIN \n        \"Users\" u ON r.name = u.role \n      GROUP BY \n        r.id \n      LIMIT ${take} OFFSET ${skip};\n    `;\n\n    const result = await this.pgService.query(query);\n    return {\n      message: `Список ролей с количеством пользователей (take: ${take}, skip: ${skip})`,\n      data: result.rows,\n    };\n  }\n\n  async findOne(id: number) {\n    const query = `\n      SELECT * FROM \"Roles\" WHERE id = ${id};\n    `;\n    const result = await this.pgService.query(query);\n    if (!result.rows[0]) {\n      throw new HttpException('Роль не найдена 👀', 404);\n    }\n    return {\n      message: 'Роль найдена',\n      data: result.rows[0],\n    };\n  }\n\n  async update(id: number, body: UpdateRoleDto) {\n    const query = `\n      UPDATE \"Roles\" SET name = '${body.name}', access = '${JSON.stringify(body.access)}', description = '${body.description}'\n      WHERE id = ${id}\n      RETURNING *;\n    `;\n    const result = await this.pgService.query(query);\n    if (!result.rows[0]) {\n      throw new HttpException('Роль не найдена 👀', 404);\n    }\n    return {\n      message: 'Роль успешно обновлена',\n      data: result.rows[0],\n    };\n  }\n\n  async remove(id: number) {\n    const query = `\n      DELETE FROM \"Roles\" WHERE id = ${id};\n    `;\n    await this.pgService.query(query);\n\n    return {\n      message: 'Роль успешно удалена',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Session.html":{"url":"classes/Session.html","title":"class - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Session {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionGateway.html":{"url":"classes/SessionGateway.html","title":"class - SessionGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                handleConnection\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.gateway.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createSessionDto: CreateSessionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createSession')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.gateway.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSessionDto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllSession')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findOneSession')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.gateway.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@SubscribeMessage('connection')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.gateway.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeSession')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.gateway.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateSessionDto: UpdateSessionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateSession')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.gateway.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateSessionDto\n                                            \n                                                            UpdateSessionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n} from '@nestjs/websockets';\nimport { SessionService } from './session.service';\nimport { CreateSessionDto } from './dto/create-session.dto';\nimport { UpdateSessionDto } from './dto/update-session.dto';\nimport { UseGuards } from '@nestjs/common';\nimport { SessionGuard } from './sessuon.guard';\n\n@WebSocketGateway()\nexport class SessionGateway {\n  constructor(private readonly sessionService: SessionService) {}\n\n  // on connection\n  @UseGuards(SessionGuard)\n  @SubscribeMessage('connection')\n  handleConnection() {\n    console.log('New connection');\n  }\n  @SubscribeMessage('createSession')\n  create(@MessageBody() createSessionDto: CreateSessionDto) {\n    return this.sessionService.create(createSessionDto);\n  }\n\n  @SubscribeMessage('findAllSession')\n  findAll() {\n    return this.sessionService.findAll();\n  }\n\n  @SubscribeMessage('findOneSession')\n  findOne(@MessageBody() id: number) {\n    return this.sessionService.findOne(id);\n  }\n\n  @SubscribeMessage('updateSession')\n  update(@MessageBody() updateSessionDto: UpdateSessionDto) {\n    return this.sessionService.update(updateSessionDto.id, updateSessionDto);\n  }\n\n  @SubscribeMessage('removeSession')\n  remove(@MessageBody() id: number) {\n    return this.sessionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/session/sessuon.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/sessuon.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const client: Socket = context.switchToWs().getClient();\n\n    // Get the cookie from the headers\n    const cookie = client.handshake.headers;\n    console.log(cookie);\n\n    // Validate the session\n    if (!cookie) {\n      client.disconnect();\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nSessionService\n\nSessionService\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { SessionGateway } from './session.gateway';\n\n@Module({\n  providers: [SessionGateway, SessionService],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createSessionDto: CreateSessionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSessionDto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateSessionDto: UpdateSessionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateSessionDto\n                                            \n                                                            UpdateSessionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateSessionDto } from './dto/create-session.dto';\nimport { UpdateSessionDto } from './dto/update-session.dto';\n\n@Injectable()\nexport class SessionService {\n  create(createSessionDto: CreateSessionDto) {\n    return 'This action adds a new session';\n  }\n\n  findAll() {\n    return process.env.DB_HOST;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} session`;\n  }\n\n  update(id: number, updateSessionDto: UpdateSessionDto) {\n    return `This action updates a #${id} session`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} session`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TablesModule.html":{"url":"modules/TablesModule.html","title":"module - TablesModule","body":"\n                   \n\n\n\n\n    Modules\n    TablesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TablesModule\n\n\n\ncluster_TablesModule_providers\n\n\n\n\nTablesService\n\nTablesService\n\n\n\nTablesModule\n\nTablesModule\n\nTablesModule -->\n\nTablesService->TablesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tables/tables.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TablesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TablesService } from './tables.service';\n\n@Module({\n  providers: [TablesService],\n})\nexport class TablesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TablesService.html":{"url":"injectables/TablesService.html","title":"injectable - TablesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TablesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tables/tables.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDefaultRoles\n                            \n                            \n                                    Async\n                                createDefaultUsers\n                            \n                            \n                                    Async\n                                createRoles\n                            \n                            \n                                    Async\n                                createTgUsers\n                            \n                            \n                                    Async\n                                createUsers\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pgService: PgService)\n                    \n                \n                        \n                            \n                                Defined in src/tables/tables.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pgService\n                                                  \n                                                        \n                                                                        PgService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDefaultRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDefaultRoles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tables/tables.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDefaultUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDefaultUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tables/tables.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tables/tables.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTgUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTgUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tables/tables.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tables/tables.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tables/tables.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PgService } from 'src/other/pg.service';\n\n@Injectable()\nexport class TablesService implements OnModuleInit {\n  constructor(private readonly pgService: PgService) {}\n\n  async onModuleInit() {\n    await this.createRoles();\n    await this.createDefaultRoles(); // This should run after creating the Roles table\n    await this.createUsers();\n    await this.createDefaultUsers();\n    await this.createTgUsers();\n  }\n\n  // Создание таблицы Roles\n  async createRoles() {\n    const query_create_table = `\n    CREATE TABLE IF NOT EXISTS \"Roles\" (\n      \"id\" SERIAL PRIMARY KEY,  -- Автоматический идентификатор\n      \"name\" VARCHAR(255) UNIQUE,  -- Уникальная роль пользователя\n      \"access\" JSONB,  -- Права доступа в формате JSON\n      \"description\" VARCHAR(255) DEFAULT '',  -- Описание роли\n      \"created_at\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Дата создания\n    );\n\n    -- Добавляем индекс для оптимизации поиска по имени в таблице Roles\n    CREATE INDEX IF NOT EXISTS idx_roles_name ON \"Roles\" (\"name\");\n    `;\n    await this.pgService.safeQuery(query_create_table, 'Roles');\n  }\n\n  // Создание ролей по умолчанию\n  async createDefaultRoles() {\n    const query_insert_roles = `\n    INSERT INTO \"Roles\" (name, access, description)\n    VALUES\n      ('Админ', '{\n        \"can_manage_users\": true,\n        \"can_write\": true,\n        \"can_delete\": true,\n        \"can_read\": true,\n        \"can_send_audio\": true,\n        \"can_read_audio\": true,\n        \"can_send_video\": true,\n        \"can_read_video\": true,\n        \"can_send_photo\": true,\n        \"can_read_photo\": true,\n        \"can_send_file\": true,\n        \"can_read_file\": true,\n        \"can_create_group\": true\n      }', 'Администратор'),\n      ('Оператор', '{\n        \"can_manage_users\": false,\n        \"can_write\": true,\n        \"can_delete\": false,\n        \"can_read\": true,\n        \"can_send_audio\": false,\n        \"can_read_audio\": false,\n        \"can_send_video\": false,\n        \"can_read_video\": false,\n        \"can_send_photo\": false,\n        \"can_read_photo\": false,\n        \"can_send_file\": false,\n        \"can_read_file\": false,\n        \"can_create_group\": true\n      }', 'Пользователь'),\n      ('РОП', '{\n        \"can_manage_users\": true,\n        \"can_write\": true,\n        \"can_delete\": false,\n        \"can_read\": true,\n        \"can_send_audio\": false,\n        \"can_read_audio\": false,\n        \"can_send_video\": false,\n        \"can_read_video\": false,\n        \"can_send_photo\": false,\n        \"can_read_photo\": false,\n        \"can_send_file\": false,\n        \"can_read_file\": false,\n        \"can_create_group\": false\n      }', 'РОП')\n    ON CONFLICT (name) DO NOTHING;  -- Avoid duplicates\n    `;\n\n    await this.pgService.safeQuery(query_insert_roles, 'InsertDefaultRoles');\n  }\n\n  // Создание таблицы Users с внешним ключом на таблицу Roles\n  async createUsers() {\n    const query_create_table = `\n    CREATE TABLE IF NOT EXISTS \"Users\" (\n      \"name\" VARCHAR(255),\n      \"login\" VARCHAR(255) UNIQUE,\n      \"password\" VARCHAR(60),\n      \"role\" VARCHAR(255),  -- Здесь оставляем 'role' для связи с таблицей Roles\n      \"created_at\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      PRIMARY KEY (\"login\"),\n      -- Внешний ключ для связи с таблицей Roles\n      FOREIGN KEY (\"role\") REFERENCES \"Roles\"(\"name\") ON DELETE SET NULL\n    );\n\n    CREATE INDEX IF NOT EXISTS idx_users_name ON \"Users\" (\"name\");\n    CREATE INDEX IF NOT EXISTS idx_users_role ON \"Users\" (\"role\");\n    `;\n    await this.pgService.safeQuery(query_create_table, 'Users');\n  }\n\n  async createDefaultUsers() {\n    const query_insert_users = `\n    INSERT INTO \"Users\" (name, login, password, role)\n    VALUES\n      ('Главный админ', 'admin', '$2a$10$UfYmSCVDFovTdfKwWjJjxenQpXVfYjfI0W7hDOcNqTKDV7kO8xRZu', 'Админ')\n    ON CONFLICT (login) DO NOTHING;  -- Avoid duplicates\n    `;\n    await this.pgService.query(query_insert_users);\n  }\n\n  // Создание таблицы TgUsers с внешним ключом на таблицу Users\n  async createTgUsers() {\n    const query_create_table = `\n    CREATE TABLE IF NOT EXISTS \"TgUsers\" (\n      \"id\" SERIAL PRIMARY KEY,\n      \"phoneNumber\" VARCHAR(20) UNIQUE,\n      \"phoneCodeHash\" VARCHAR(255),\n      \"session\" VARCHAR(511),\n      \"verified\" BOOLEAN DEFAULT FALSE,\n      \"created_at\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      \"login\" VARCHAR(255),\n      -- Внешний ключ для связи с таблицей Users\n      FOREIGN KEY (\"login\") REFERENCES \"Users\"(\"login\") ON DELETE CASCADE\n    );\n\n    CREATE INDEX IF NOT EXISTS idx_tg_users_login ON \"TgUsers\" (\"login\");\n    `;\n    await this.pgService.safeQuery(query_create_table, 'TgUsers');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TgAuthController.html":{"url":"controllers/TgAuthController.html","title":"controller - TgAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TgAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tg-auth/tg-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tg-auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshCode\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshCode(login: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Refresh  phone code'})@ApiBadRequestResponse({description: 'PHONE_CODE_INVALID'})@Patch('refresh-code/:login')\n                \n            \n\n                    \n                        \n                            Defined in src/tg-auth/tg-auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(login: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Register new user in telegram'})@ApiBody({description: 'Send phone number to create operator', schema: undefined})@ApiBadRequestResponse({description: 'PHONE_NUMBER_INVALID'})@Post('register/:login')\n                \n            \n\n                    \n                        \n                            Defined in src/tg-auth/tg-auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        verify\n                        \n                    \n                \n            \n            \n                \n                        \n                    verify(login: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Verify phone number'})@ApiBody({description: 'Send code to verify phone number', schema: undefined})@ApiBadRequestResponse({description: 'PHONE_CODE_INVALID'})@Post('verify/:login')\n                \n            \n\n                    \n                        \n                            Defined in src/tg-auth/tg-auth.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Param, Patch } from '@nestjs/common';\nimport { TgAuthService } from './tg-auth.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Auth } from 'src/auth/auth.decorator';\n\n@Auth('admin')\n@ApiTags('Telegram Auth')\n@Controller('tg-auth')\nexport class TgAuthController {\n  constructor(private readonly tgAuthService: TgAuthService) {}\n\n  @ApiOperation({ summary: 'Register new user in telegram' })\n  @ApiBody({\n    description: 'Send phone number to create operator',\n    schema: {\n      type: 'object',\n      properties: {\n        phoneNumber: {\n          type: 'string',\n          example: '+9996624545',\n        },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'PHONE_NUMBER_INVALID',\n  })\n  @Post('register/:login')\n  register(\n    @Param('login') login: string,\n    @Body() body: { phoneNumber: string },\n  ) {\n    return this.tgAuthService.register(login, body.phoneNumber);\n  }\n\n  @ApiOperation({ summary: 'Verify phone number' })\n  @ApiBody({\n    description: 'Send code to verify phone number',\n    schema: {\n      type: 'object',\n      properties: {\n        phoneCode: {\n          type: 'string',\n          example: '12345',\n        },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'PHONE_CODE_INVALID',\n  })\n  @Post('verify/:login')\n  verify(@Param('login') login: string, @Body() body: { phoneCode: string }) {\n    return this.tgAuthService.verify(login, body.phoneCode);\n  }\n\n  @ApiOperation({ summary: 'Refresh  phone code' })\n  @ApiBadRequestResponse({\n    description: 'PHONE_CODE_INVALID',\n  })\n  @Patch('refresh-code/:login')\n  refreshCode(@Param('login') login: string) {\n    return this.tgAuthService.refreshCode(login);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TgAuthModule.html":{"url":"modules/TgAuthModule.html","title":"module - TgAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    TgAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TgAuthModule\n\n\n\ncluster_TgAuthModule_providers\n\n\n\ncluster_TgAuthModule_imports\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nTgAuthModule\n\nTgAuthModule\n\nTgAuthModule -->\n\nRedisModule->TgAuthModule\n\n\n\n\n\nTgAuthService\n\nTgAuthService\n\nTgAuthModule -->\n\nTgAuthService->TgAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tg-auth/tg-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TgAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TgAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TgAuthService } from './tg-auth.service';\nimport { TgAuthController } from './tg-auth.controller';\nimport { RedisModule } from 'src/redis/redis.module';\n\n@Module({\n  imports: [RedisModule], // Import RedisModule to use RedisService\n  controllers: [TgAuthController],\n  providers: [TgAuthService],\n})\nexport class TgAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TgAuthService.html":{"url":"injectables/TgAuthService.html","title":"injectable - TgAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TgAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tg-auth/tg-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                refreshCode\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pgService: PgService)\n                    \n                \n                        \n                            \n                                Defined in src/tg-auth/tg-auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pgService\n                                                  \n                                                        \n                                                                        PgService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshCode(login: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tg-auth/tg-auth.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(login: string, phoneNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tg-auth/tg-auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                phoneNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                        \n                    verify(login: string, phoneCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tg-auth/tg-auth.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                phoneCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PgService } from 'src/other/pg.service';\nimport { telegramClient } from 'src/other/telegramClient';\nimport { Api } from 'telegram';\n\n@Injectable()\nexport class TgAuthService {\n  constructor(private readonly pgService: PgService) {}\n\n  async register(login: string, phoneNumber: string) {\n    // find user by phone number or if not exists create table tgusers\n    try {\n      const query_find_user = `\n       -- Проверяем существует ли пользователь с таким телефоном\n        SELECT * FROM \"TgUsers\" WHERE \"phoneNumber\" = '${phoneNumber}';\n        `;\n      const user = await this.pgService.query(query_find_user);\n      if (user.rowCount) {\n        return `Такой номер уже используется 📵`;\n      }\n\n      const query = `\n        -- Добавляем нового пользователя в таблицу Tg-Users\n        INSERT INTO \"TgUsers\" (\"phoneNumber\", \"login\")\n        SELECT '${phoneNumber}', '${login}'\n        WHERE NOT EXISTS (\n            SELECT 1 FROM \"TgUsers\" WHERE \"phoneNumber\" = '${phoneNumber}'\n        );\n        `;\n      await this.pgService.query(query);\n    } catch {\n      throw new HttpException('Ошибка при регистрации', HttpStatus.BAD_REQUEST);\n    }\n\n    // send code to the phone number\n    try {\n      const client = await telegramClient(''); // Create new Telegram client\n      const { phoneCodeHash } = await client.sendCode(\n        {\n          apiId: +process.env.API_ID,\n          apiHash: process.env.API_HASH,\n        },\n        phoneNumber,\n      );\n      console.log('phoneCodeHash', phoneCodeHash);\n\n      const session = client.session.save();\n\n      // Use parameterized query to safely insert or update a user\n      const query = `\n  INSERT INTO \"TgUsers\" (\"phoneNumber\", \"phoneCodeHash\", \"session\", \"login\")\n  VALUES ($1, $2, $3, $4)\n  ON CONFLICT (\"phoneNumber\") \n  DO UPDATE SET \n    \"phoneCodeHash\" = EXCLUDED.\"phoneCodeHash\",\n    \"session\" = EXCLUDED.\"session\",\n    \"login\" = EXCLUDED.\"login\";\n`;\n\n      // Execute the query with values\n      await this.pgService.query(query, [\n        phoneNumber,\n        phoneCodeHash,\n        session,\n        login,\n      ]);\n\n      // Disconnect the Telegram client after the operation\n      await client.disconnect();\n\n      return {\n        message: 'Код отправлен на номер 📲',\n        phoneNumber: phoneNumber,\n      };\n    } catch (e) {\n      throw new HttpException(e, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  async verify(login: string, phoneCode: string) {\n    try {\n      // find user by login\n      const query_find_user = `\n        SELECT * FROM \"TgUsers\" WHERE \"login\" = '${login}';\n        `;\n      const user = await this.pgService.query(query_find_user);\n      console.log('user', user.rows[0]);\n      if (!user.rowCount) {\n        throw new HttpException(\n          `Пользователь не найден 🤷‍♂️`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      const client = await telegramClient(user.rows[0].session);\n      try {\n        await client.invoke(\n          new Api.auth.SignIn({\n            phoneNumber: user.rows[0].phoneNumber,\n            phoneCodeHash: user.rows[0].phoneCodeHash,\n            phoneCode: phoneCode,\n          }),\n        );\n        const newSession = client.session.save();\n        // update user session\n        await this.pgService.query(\n          `UPDATE \"TgUsers\"\n          SET \"session\" = '${newSession}',\n              \"verified\" = TRUE\n          WHERE \"login\" = '${login}';`,\n        );\n\n        if (client.isUserAuthorized()) {\n          await client.disconnect();\n          return {\n            message: 'Пользователь успешно  зарегистрирован 🎉',\n            session: newSession,\n          };\n        } else {\n          throw new HttpException('PHONE_CODE_INVALID', HttpStatus.BAD_REQUEST);\n        }\n      } catch (e) {\n        throw new HttpException(e, HttpStatus.BAD_GATEWAY);\n      }\n    } catch (e) {\n      throw new HttpException(e, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  async refreshCode(login: string) {\n    // find user by phone number or if not exists create table tgusers\n    let phoneNumber = '';\n    try {\n      const query_find_user = `\n           -- Проверяем существует ли пользователь с таким login\n            SELECT * FROM \"TgUsers\" WHERE \"login\" = '${login}';\n            `;\n      const user = await this.pgService.query(query_find_user);\n      if (!user.rowCount) {\n        throw new HttpException(\n          'Пользователь не найден 🤷‍♂️',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      phoneNumber = user.rows[0].phoneNumber;\n    } catch (e) {\n      throw new HttpException(e, HttpStatus.BAD_REQUEST);\n    }\n    // send code to the phone number\n    try {\n      const client = await telegramClient(''); // create new telegram client\n      const { phoneCodeHash } = await client.sendCode(\n        {\n          apiId: +process.env.API_ID,\n          apiHash: process.env.API_HASH,\n        },\n        phoneNumber,\n      );\n      const session = client.session.save();\n      // add user phone number to the table tg-users\n      const query = `\n       -- Обновляем запись в таблице TgUsers для существующего пользователя по login\n      UPDATE \"TgUsers\"\n      SET \"phoneCodeHash\" = '${phoneCodeHash}',\n          \"session\" = '${session}'\n      WHERE \"login\" = '${login}';\n      `;\n      await client.disconnect();\n      await this.pgService.query(query);\n\n      return {\n        message: ' Код отправлен на номер 📲 ',\n        phoneNumber: phoneNumber,\n      };\n    } catch (e) {\n      throw new HttpException(e, HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/update-role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRoleDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSessionDto.html":{"url":"classes/UpdateSessionDto.html","title":"class - UpdateSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/dto/update-session.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateSessionDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/session/dto/update-session.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateSessionDto } from './create-session.dto';\n\nexport class UpdateSessionDto extends PartialType(CreateSessionDto) {\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, ['login'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, OmitType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['login'] as const),\n) {}\nexport class UpdateUserPasswordDto {\n  @ApiProperty({\n    required: true,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasswordDto.html":{"url":"classes/UpdateUserPasswordDto.html","title":"class - UpdateUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, OmitType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['login'] as const),\n) {}\nexport class UpdateUserPasswordDto {\n  @ApiProperty({\n    required: true,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                getAll\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                updatePassword\n                            \n                            \n                                    \n                                    \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth('admin')@Post('create-user')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth('admin')@Get('all')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth()@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(body: UpdateUserPasswordDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth()@Patch('update-password')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UpdateUserPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(login: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth('admin')@Patch('update-profile/:login')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Request,\n  Patch,\n  Param,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { Auth } from 'src/auth/auth.decorator';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UpdateUserDto, UpdateUserPasswordDto } from './dto/update-user.dto';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n  @Auth('admin')\n  @Get('all')\n  getAll() {\n    return this.usersService.getAll();\n  }\n  @Auth('admin')\n  @Post('create-user')\n  create(@Body() body: CreateUserDto) {\n    return this.usersService.create(body);\n  }\n\n  @Auth()\n  @Get('profile')\n  getProfile(@Request() req: any) {\n    return this.usersService.getProfile(req);\n  }\n\n  @Auth()\n  @Patch('update-password')\n  updatePassword(\n    @Body() body: UpdateUserPasswordDto,\n    @Request() req: { login: string },\n  ) {\n    return this.usersService.updatePassword(req.login, body);\n  }\n\n  @Auth('admin')\n  @Patch('update-profile/:login')\n  updateProfile(\n    @Param('login') login: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    return this.usersService.updateProfile(login, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRedisModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { RedisModule } from 'src/redis/redis.module';\n\n@Module({\n  imports: [RedisModule], // Import RedisModule to use RedisService\n\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getSome\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pgService: PgService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pgService\n                                                  \n                                                        \n                                                                        PgService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSome\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSome(take: number, skip: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(login: string, body: UpdateUserPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateUserPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(login: string, body: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                login\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { PgService } from 'src/other/pg.service';\nimport * as bcrypt from 'bcrypt';\nimport { UpdateUserPasswordDto, UpdateUserDto } from './dto/update-user.dto';\nimport { access } from 'fs';\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly pgService: PgService) {}\n  async getAll() {\n    const query = `\n  SELECT \n    u.\"login\", \n    u.\"name\", \n    u.\"role\",\n    u.\"created_at\",\n    t.\"phoneNumber\" ,\n    t.\"verified\"\n  FROM \"Users\" u\n  LEFT JOIN \"TgUsers\" t ON u.\"login\" = t.\"login\";\n`;\n    const result = await this.pgService.query(query);\n\n    return {\n      message: 'Список пользователей',\n      data: result.rows,\n    };\n  }\n  async getSome(take: number, skip: number) {\n    const query = `\n    SELECT \n      u.\"login\", \n      u.\"name\", \n      u.\"role\",\n      u.\"created_at\",\n      t.\"phoneNumber\", \n    FROM \"Users\" u\n    LEFT JOIN \"TgUsers\" t ON u.\"login\" = t.\"login\"\n    ORDER BY u.\"created_at\" DESC\n    LIMIT ${take} OFFSET ${skip};\n  `;\n    const result = await this.pgService.query(query);\n\n    return {\n      message: 'Список пользователей',\n      data: result.rows,\n    };\n  }\n  async create(body: CreateUserDto) {\n    const query = `\n      SELECT * FROM \"Users\" WHERE \"login\" = '${body.login}';\n    `;\n    const result = await this.pgService.query(query);\n    if (result.rowCount) {\n      throw new HttpException('Пользователь уже существует', 400);\n    }\n    const hashedPassword = await bcrypt.hash(body.password, 10);\n    const insertQuery = `\n      INSERT INTO \"Users\" (name, login, password, role)\n      VALUES ('${body.name}', '${body.login}', '${hashedPassword}', '${body.role}')\n      RETURNING login;\n    `;\n    await this.pgService.query(insertQuery);\n    return {\n      message: 'Пользователь успешно создан',\n      data: body.login,\n    };\n  }\n\n  async getProfile(req: any) {\n    const query = `\n      SELECT  name, login, role FROM \"Users\" WHERE \"login\" = '${req.login}';\n    `;\n    const result = await this.pgService.query(query);\n    return {\n      message: 'Профиль пользователя',\n      data: result.rows[0],\n      access: req.access,\n    };\n  }\n\n  async updatePassword(login: string, body: UpdateUserPasswordDto) {\n    if (body.password) {\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      const query = `\n        UPDATE \"Users\" SET  password = '${hashedPassword}'\n        WHERE login = '${login}';\n      `;\n      await this.pgService.query(query);\n    } else {\n      throw new HttpException('Пароль не может быть пустым', 400);\n    }\n    return {\n      message: 'Профиль успешно обновлен',\n    };\n  }\n\n  async updateProfile(login: string, body: UpdateUserDto) {\n    if (body.password) {\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      const query = `\n        UPDATE \"Users\" SET  password = '${hashedPassword}'\n        WHERE login = '${login}';\n      `;\n      await this.pgService.query(query);\n    }\n    if (body.name) {\n      const query = `\n        UPDATE \"Users\" SET  name = '${body.name}'\n        WHERE login = '${login}';\n      `;\n      await this.pgService.query(query);\n    }\n    if (body.role) {\n      const query = `\n        UPDATE \"Users\" SET  role = '${body.role}'\n        WHERE login = '${login}';\n      `;\n      await this.pgService.query(query);\n    }\n    return {\n      message: 'Профиль успешно обновлен',\n      data: login,\n      password: body.password,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/admin/admin.guad.ts\n            \n            guard\n            AdminGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.decorator.ts\n            \n            function\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/other/pg.service.ts\n            \n            injectable\n            PgService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/other/redis.ts\n            \n            class\n            RedisIoAdapter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/other/telegramClient.ts\n            \n            function\n            telegramClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/other/telegramClient.ts\n            \n            variable\n            TEST_SERVERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/session/dto/create-session.dto.ts\n            \n            class\n            CreateSessionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/dto/update-session.dto.ts\n            \n            class\n            UpdateSessionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            class\n            Session\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.gateway.ts\n            \n            class\n            SessionGateway\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/session/sessuon.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tables/tables.service.ts\n            \n            injectable\n            TablesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/tg-auth/tg-auth.controller.ts\n            \n            controller\n            TgAuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tg-auth/tg-auth.service.ts\n            \n            injectable\n            TgAuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.4.3\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/websockets : ^10.4.3\n        \n            @socket.io/redis-adapter : ^8.3.0\n        \n            bcrypt : ^5.1.1\n        \n            pg : ^8.13.0\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.0\n        \n            telegram : ^2.25.9\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            telegramClient   (src/.../telegramClient.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n            \n                \nAuth(role?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/other/telegramClient.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        telegramClient\n                        \n                    \n                \n            \n            \n                \ntelegramClient(session, apiId, apiHash)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                session\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                apiId\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    process.env.API_ID\n                                            \n\n                                        \n                                        \n                                                apiHash\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    process.env.API_HASH\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PgModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TablesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TgAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PgModule\n\n\n\ncluster_PgModule_exports\n\n\n\ncluster_PgModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_TablesModule\n\n\n\ncluster_TablesModule_providers\n\n\n\ncluster_TgAuthModule\n\n\n\ncluster_TgAuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPgModule\n\nPgModule\n\nAppModule -->\n\nPgModule->AppModule\n\n\n\n\n\nPgService \n\nPgService \n\nPgService  -->\n\nPgModule->PgService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nRedisModule->RolesModule\n\n\n\n\n\nTgAuthModule\n\nTgAuthModule\n\nTgAuthModule -->\n\nRedisModule->TgAuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRedisModule->UsersModule\n\n\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nTablesModule\n\nTablesModule\n\nAppModule -->\n\nTablesModule->AppModule\n\n\n\nAppModule -->\n\nTgAuthModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPgService\n\nPgService\n\nPgModule -->\n\nPgService->PgModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nTablesService\n\nTablesService\n\nTablesModule -->\n\nTablesService->TablesModule\n\n\n\n\n\nTgAuthService\n\nTgAuthService\n\nTgAuthModule -->\n\nTgAuthService->TgAuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.2.1\n        \n            Description : euphoria-messenger-backend\n        \n            Author : Akbarkhon !Avazkhonov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TEST_SERVERS   (src/.../telegramClient.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/other/telegramClient.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TEST_SERVERS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.TEST_SERVERS == 'true'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
