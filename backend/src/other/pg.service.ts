import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { Client } from 'pg';
import { HttpException } from '@nestjs/common';

@Injectable()
export class PgService implements OnModuleInit, OnModuleDestroy {
  private client: Client;

  constructor() {
    this.client = new Client({
      host: process.env.DB_HOST, // –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      port: +process.env.DB_PORT, // –ü–æ—Ä—Ç PostgreSQL
      user: process.env.DB_USER, // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      password: process.env.DB_PASSWORD, // –ü–∞—Ä–æ–ª—å
      database: process.env.DB_NAME, // –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    });
  }

  // host: process.env.DB_HOST, // –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  // port: process.env.DB_PORT, // –ü–æ—Ä—Ç PostgreSQL
  // user: process.env.DB_USER, // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // password: process.env.DB_PASSWORD, // –ü–∞—Ä–æ–ª—å
  // database: process.env.DB_NAME, // –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

  async onModuleInit() {
    await this.client.connect(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
  }

  async onModuleDestroy() {
    await this.client.end(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
  }

  async query(query: string, params?: any[]): Promise<any> {
    return this.client.query(query, params); // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
  }

  async safeQuery(
    query: string,
    check: string = '',
    params?: any[],
  ): Promise<any> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if (!/^[a-zA-Z0-9_.,()'" ]+$/.test(check)) {
      throw new HttpException('–ù–µ –ø—ã—Ç–∞–π—Å—è –≤–∑–ª–æ–º–∞—Ç—å üòä', 418);
    }
    return this.client.query(query, params); // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
  }
}
